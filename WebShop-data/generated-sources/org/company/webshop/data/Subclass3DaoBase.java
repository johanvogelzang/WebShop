/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:10 CEST 2011
 *     Application model: Subclass3
 *     Generator        : Mod4j BusinessDomainDsl generator: DaoInterfaceBase.xpt
 */

package org.company.webshop.data;

import java.util.List;

import org.company.webshop.domain.Subclass3;
import org.company.webshop.domain.Subclass3Example;

/**
 * Subclass3DaoBaseData Access Object (DAO). Responsible for accessing database.
 * 
 * @author Mod4j generated
 * 
 */
public interface Subclass3DaoBase {

	/**
	 * Retrieves a Subclass3 by its ID from the database.
	 * 
	 * @param id id of the Subclass3 to retrieve.
	 * @return Subclass3 retrieved or null when no Subclass3 was found.
	 */
	Subclass3 retrieve(Long id);

	/**
	 * Adds a new Subclass3 to the database
	 * 
	 * @param object
	 *                the Subclass3 to add to the database.
	 * @return the stored Subclass3.
	 */
	Long add(Subclass3 object);

	/**
	 * Deletes a Subclass3 from the database.
	 * 
	 * @param object
	 *                the Subclass3 to delete
	 */
	void delete(Subclass3 object);

	/**
	 * Selects all Subclass3s from the database.
	 * 
	 * @return a List of all Subclass3 objects.
	 */
	List<Subclass3> listAll();

	/**
	 * Selects a range (page) of Subclass3s from the database.
	 * 
	 * @param firstResult the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults  the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * 
	 * @return a List containing 0 or more Subclass3 objects.
	 *
	 * @see #listPage(int, int)
	 */
	List<Subclass3> listPage(final int firstResult, final int maxResults);

	/**
	 * Selects a sorted range (page) of Subclass3s from the database.
	 * 
	 * @param firstResult the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults the maximum number of result objects to retrieve (or <=0 for no limit)
	 * @param sortProperty the property of the object to sort on
	 * @param isAscending should the retruned list be sorted ascending? 
	 * 
	 * @return a sorted List containing 0 or more Subclass3 objects.
	 *
	 * @see #listPage(int, int, String, boolean)
	 */
	List<Subclass3> listPage(final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending);

	/**
	 * Selects a sorted range (page) of Subclass3s from the database.
	 * 
	 * @param example the example object to which the result objects need to conform
	 * @param firstResult the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults the maximum number of result objects to retrieve (or <=0 for no limit)
	 * @param sortProperty the property of the object to sort on
	 * @param isAscending should the retruned list be sorted ascending? 
	 * 
	 * @return a sorted List containing 0 or more Subclass3 objects.
	 *
	 * @see #listPage(int, int, String, boolean)
	 */
	List<Subclass3> listPageByExample(final Subclass3Example example,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending);

	/**
	 * Counts the number of persisted Subclass3 objects in the database.
	 * 
	 * @return the number of persisted objects in the database.
	 */
	long count();

	/**
	 * Counts the number of persisted Subclass3 objects in the database that
	 * matches the given example object.
	 *
	 * @param example
	 *                the example object to be counted
	 * 
	 * @return the number of persisted objects in the database.
	 */
	long count(final Subclass3Example example);

	/**
	 * Selects Subclass3s from the database that matches an
	 * example object using Query-by-Example(QBE).
	 * 
	 * @param example
	 *                the example object to which the result objects need to conform
	 * @return a List of Subclass3 objects.
	 */
	List<Subclass3> findByExample(Subclass3Example example);
}
