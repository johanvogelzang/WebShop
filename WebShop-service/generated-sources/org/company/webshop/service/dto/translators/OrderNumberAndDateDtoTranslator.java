
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: OrderNumberAndDateDto
 *     Generator        : Mod4j DatacontractDsl generator: Translators.xpt
 */

package org.company.webshop.service.dto.translators;

import java.util.HashMap;
import java.util.Map;

import org.company.webshop.data.CustomerDao;
import org.company.webshop.domain.Customer;
import org.company.webshop.domain.Order;
import org.company.webshop.domain.OrderExample;
import org.company.webshop.service.dto.OrderNumberAndDateDto;
import org.mod4j.runtime.exception.ConcurrentUpdateException;
import org.springframework.util.Assert;

/**
 * Translator for translating Order domain objects from- and to OrderNumberAndDateDto data transfer objects. 
 *
 * @author generated by Mod4j
 */
public class OrderNumberAndDateDtoTranslator {

	protected SimpleCustomerDtoTranslator simpleCustomerDtoTranslator;

	/**
	 * @param object
	 *            The simpleCustomerDtoTranslator to set.
	 */
	public void setSimpleCustomerDtoTranslator(
			SimpleCustomerDtoTranslator object) {
		this.simpleCustomerDtoTranslator = object;
	}

	/** 
	 * @return The simpleCustomerDtoTranslator to get.
	 *
	 */
	public SimpleCustomerDtoTranslator getSimpleCustomerDtoTranslator() {
		return this.simpleCustomerDtoTranslator;
	}

	protected CustomerDao customerDao;

	/**
	 * @param object
	 *            The customerDao to set.
	 */
	public void setCustomerDao(CustomerDao object) {
		this.customerDao = object;
	}

	/** 
	 * @return The customerDao to get.
	 *
	 */
	public CustomerDao getCustomerDao() {
		return this.customerDao;
	}

	/**
	
	 * Translates a OrderNumberAndDateDto dto object into a Order domain object.
	 * A new domain object will be created passed to the {@link #fromDto(OrderNumberAndDateDto, Order)}.
	.
	 *
	 * @param source The {@link OrderNumberAndDateDto} object to translate, may not be {@code null}.
	 * @return {@link Order}, the resulting domain object.
	 */
	public Order fromDto(final OrderNumberAndDateDto source) {
		return fromDto(source, new HashMap<Object, Object>());
	}

	Order fromDto(final OrderNumberAndDateDto source,
			final Map<Object, Object> translated) {

		Assert.notNull(source, "argument [source] may not be null");
		Assert.isNull(source.getId(),
				"Can not translate a dto with existing id to a new domain object. Dto: "
						+ source);
		Order target = new Order(source.getOrderNumber()

		);
		return fromDto(source, target, translated);

	}

	/**
	 * Translates a OrderNumberAndDateDto dto object into a Order domain object. All properties in the dto will be mapped to the 
	 * corresponding property in the <code>target</code> domain object. 
	 *
	 * @param source The {@link OrderNumberAndDateDto} object to translate, may not be {@code null}.
	 * @param target The {@link Order} object translated from source, may not be {@code null}.
	 * @return {@link Order}, the resulting domain object.
	 */
	public Order fromDto(final OrderNumberAndDateDto source, final Order target) {
		return fromDto(source, target, new HashMap<Object, Object>());
	}

	Order fromDto(final OrderNumberAndDateDto source, final Order target,
			final Map<Object, Object> translated) {

		if (translated.containsKey((source))) {
			return (Order) translated.get(source);
		}

		Assert.notNull(source, "argument [source] may not be null");
		Assert.notNull(target, "argument [target] may not be null");

		final boolean equals = (source.getId() == null)
				? target.getId() == null
				: source.getId().equals(target.getId());

		if (!equals) {
			throw new IllegalArgumentException(
					"Can not translate a dto to a domain object when the id of the dto differs from the id of the domain object.");
		}

		validateVersion(source, target);

		target.activateValidation(false);

		target.setOrderNumber(source.getOrderNumber());

		target.setOrderDate(source.getOrderDate());

		translated.put(source, target);

		/*
		 * Synchronize Customer association.
		 */

		if (source.getCustomer() == null) {
			/* Delete associated object */
			target.setCustomer(null);
		} else { // source.getCustomer() != null ) {
			/* Add a new associated object */
			if (source.getCustomer().getId() != null) {
				/* Add an existing object */
				Customer original = customerDao.retrieve(source.getCustomer()
						.getId());
				Customer updated = simpleCustomerDtoTranslator.fromDto(source
						.getCustomer(), original, translated);
				target.setCustomer(updated);
			} else {
				/* Add a new object */
				target.setCustomer(simpleCustomerDtoTranslator.fromDto(source
						.getCustomer(), translated));
			}
		}

		target.activateValidation(true);

		return target;
	}

	/**
	 * Translates a Order domain object into a OrderNumberAndDateDto dto object. Properties and associations of the domain object
	 * will be mapped to the corresponding properties and associations in the dto object.
	 * To prevent looping while translating biderectional or circulair associations translated objects will be added to the 'translated' register.    
	 *
	 * @param source The {@link Order} object to translate.
	 *
	 * @return OrderNumberAndDateDto The {@link OrderNumberAndDateDto} object translated from source.
	 */
	public OrderNumberAndDateDto toDto(final Order source) {
		return toDto(source, new HashMap<Object, Object>());
	}

	OrderNumberAndDateDto toDto(final Order source,
			final Map<Object, Object> translated) {
		if (translated.containsKey((source))) {
			return (OrderNumberAndDateDto) translated.get(source);
		}
		Assert.notNull(source, "argument [source] may not be null");
		OrderNumberAndDateDto result = new OrderNumberAndDateDto(
				source.getId(), source.getVersion());
		result.setOrderNumber(source.getOrderNumber());
		result.setOrderDate(source.getOrderDate());

		translated.put(source, result);

		if (source.getCustomer() != null) {
			result.setCustomer(simpleCustomerDtoTranslator.toDto(source
					.getCustomer(), translated));
		}

		return result;
	}

	/**
	 * Translates a OrderNumberAndDateDto dto object into a OrderExample Example domain object. 
	 * All properties in the dto will be mapped to the corresponding property in the <code>target</code> domain object. 
	 * Association references in the dto will not be translated into the <code>target</code> domain object.
	 *
	 * @param source The {@link OrderNumberAndDateDto} object to translate.
	 *
	 * @return {@link OrderExample}, the resulting businessclass object.
	 */
	public OrderExample exampleFromDto(final OrderNumberAndDateDto source) {
		Assert.notNull(source, "argument [source] may not be null");
		OrderExample result = new OrderExample();

		if (source.getOrderNumber() != null) {
			result.setOrderNumber(source.getOrderNumber());
		}
		if (source.getOrderDate() != null) {
			result.setOrderDate(source.getOrderDate());
		}

		return result;
	}

	/**
	 * Validate that the version of the DTO and the business object are valid.
	 * The DTO may only have a version if the domain object also has a version.
	 * When they both have a version and the DTO version is less, another user
	 * has updated the domain object in the meantime, if it is equal, all is
	 * well. If it is more, an unexpected situation occurs: the DTOs is more new
	 * then the domain object: this is not possible.
	 * 
	 * @param source
	 *            The DTO.
	 * @param target
	 *            The domain object target.
	 */
	private void validateVersion(final OrderNumberAndDateDto source,
			final Order target) {
		final Integer sourceVersion = source.getVersion();
		final Integer targetVersion = target.getVersion();

		// FIXME the DTO translator should not know that -1 is the default unpersisted value!
		final boolean equals = (sourceVersion == null)
				? targetVersion == -1
				: sourceVersion.equals(targetVersion);

		if (!equals) {
			throw new ConcurrentUpdateException(
					"Versions of source and target do not match for dto "
							+ source + ", source is " + sourceVersion
							+ ", target is " + targetVersion + ".");
		}
	}
}
