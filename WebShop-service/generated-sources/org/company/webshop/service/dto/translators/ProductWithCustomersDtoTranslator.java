
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: ProductWithCustomersDto
 *     Generator        : Mod4j DatacontractDsl generator: Translators.xpt
 */

package org.company.webshop.service.dto.translators;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.company.webshop.data.CustomerDao;
import org.company.webshop.domain.Customer;
import org.company.webshop.domain.Product;
import org.company.webshop.domain.ProductExample;
import org.company.webshop.service.dto.ProductWithCustomersDto;
import org.company.webshop.service.dto.SimpleCustomerDto;
import org.mod4j.runtime.exception.ConcurrentUpdateException;
import org.springframework.util.Assert;

/**
 * Translator for translating Product domain objects from- and to ProductWithCustomersDto data transfer objects. 
 *
 * @author generated by Mod4j
 */
public class ProductWithCustomersDtoTranslator {

	protected SimpleCustomerDtoTranslator simpleCustomerDtoTranslator;

	/**
	 * @param object
	 *            The simpleCustomerDtoTranslator to set.
	 */
	public void setSimpleCustomerDtoTranslator(
			SimpleCustomerDtoTranslator object) {
		this.simpleCustomerDtoTranslator = object;
	}

	/** 
	 * @return The simpleCustomerDtoTranslator to get.
	 *
	 */
	public SimpleCustomerDtoTranslator getSimpleCustomerDtoTranslator() {
		return this.simpleCustomerDtoTranslator;
	}

	protected CustomerDao customerDao;

	/**
	 * @param object
	 *            The customerDao to set.
	 */
	public void setCustomerDao(CustomerDao object) {
		this.customerDao = object;
	}

	/** 
	 * @return The customerDao to get.
	 *
	 */
	public CustomerDao getCustomerDao() {
		return this.customerDao;
	}

	/**
	
	 * Translates a ProductWithCustomersDto dto object into a Product domain object.
	 * A new domain object will be created passed to the {@link #fromDto(ProductWithCustomersDto, Product)}.
	.
	 *
	 * @param source The {@link ProductWithCustomersDto} object to translate, may not be {@code null}.
	 * @return {@link Product}, the resulting domain object.
	 */
	public Product fromDto(final ProductWithCustomersDto source) {
		return fromDto(source, new HashMap<Object, Object>());
	}

	Product fromDto(final ProductWithCustomersDto source,
			final Map<Object, Object> translated) {

		Assert.notNull(source, "argument [source] may not be null");
		Assert.isNull(source.getId(),
				"Can not translate a dto with existing id to a new domain object. Dto: "
						+ source);
		Product target = new Product(source.getProductNumber(), source
				.getPrice(), source.isOrderable()

		);
		return fromDto(source, target, translated);

	}

	/**
	 * Translates a ProductWithCustomersDto dto object into a Product domain object. All properties in the dto will be mapped to the 
	 * corresponding property in the <code>target</code> domain object. 
	 *
	 * @param source The {@link ProductWithCustomersDto} object to translate, may not be {@code null}.
	 * @param target The {@link Product} object translated from source, may not be {@code null}.
	 * @return {@link Product}, the resulting domain object.
	 */
	public Product fromDto(final ProductWithCustomersDto source,
			final Product target) {
		return fromDto(source, target, new HashMap<Object, Object>());
	}

	Product fromDto(final ProductWithCustomersDto source, final Product target,
			final Map<Object, Object> translated) {

		if (translated.containsKey((source))) {
			return (Product) translated.get(source);
		}

		Assert.notNull(source, "argument [source] may not be null");
		Assert.notNull(target, "argument [target] may not be null");

		final boolean equals = (source.getId() == null)
				? target.getId() == null
				: source.getId().equals(target.getId());

		if (!equals) {
			throw new IllegalArgumentException(
					"Can not translate a dto to a domain object when the id of the dto differs from the id of the domain object.");
		}

		validateVersion(source, target);

		target.activateValidation(false);

		target.setProductNumber(source.getProductNumber());

		target.setOrderable(source.isOrderable());

		target.setPrice(source.getPrice());

		translated.put(source, target);

		/*
		 * Synchronize Buyers association.
		 */
		Set<Customer> buyersToBeRemoved = new HashSet<Customer>();
		/* Avoid changing the collection underneath an active iterator. */
		for (Customer element : target.getBuyers()) {
			if (source.getFromBuyers(element.getId()) == null) {
				buyersToBeRemoved.add(element);
			}
		}
		/* Objects to be removed */
		for (Customer element : buyersToBeRemoved) {
			target.removeFromBuyers(element);
		}
		for (SimpleCustomerDto element : source.getBuyers()) {
			if (element.getId() == null) {
				/* A new object to be added */
				target.addToBuyers(simpleCustomerDtoTranslator.fromDto(element,
						translated));
			} else {

				/* An existing object to be updated */
				if (target.getFromBuyers(element.getId()) == null) {
					// Element is not in target yet, read it from the store and add to target
					Customer original = customerDao.retrieve(element.getId());
					Customer updated = simpleCustomerDtoTranslator.fromDto(
							element, original, translated);
					target.addToBuyers(updated);
				} else {
					// Element is in target already, use this object. No need to add to the collection
					simpleCustomerDtoTranslator.fromDto(element, target
							.getFromBuyers(element.getId()), translated);
				}
			}
		}

		target.activateValidation(true);

		return target;
	}

	/**
	 * Translates a Product domain object into a ProductWithCustomersDto dto object. Properties and associations of the domain object
	 * will be mapped to the corresponding properties and associations in the dto object.
	 * To prevent looping while translating biderectional or circulair associations translated objects will be added to the 'translated' register.    
	 *
	 * @param source The {@link Product} object to translate.
	 *
	 * @return ProductWithCustomersDto The {@link ProductWithCustomersDto} object translated from source.
	 */
	public ProductWithCustomersDto toDto(final Product source) {
		return toDto(source, new HashMap<Object, Object>());
	}

	ProductWithCustomersDto toDto(final Product source,
			final Map<Object, Object> translated) {
		if (translated.containsKey((source))) {
			return (ProductWithCustomersDto) translated.get(source);
		}
		Assert.notNull(source, "argument [source] may not be null");
		ProductWithCustomersDto result = new ProductWithCustomersDto(source
				.getId(), source.getVersion());
		result.setProductNumber(source.getProductNumber());
		result.setOrderable(source.isOrderable());
		result.setPrice(source.getPrice());

		translated.put(source, result);

		for (Customer element : source.getBuyers()) {
			result.addToBuyers(simpleCustomerDtoTranslator.toDto(element,
					translated));
		}

		return result;
	}

	/**
	 * Translates a ProductWithCustomersDto dto object into a ProductExample Example domain object. 
	 * All properties in the dto will be mapped to the corresponding property in the <code>target</code> domain object. 
	 * Association references in the dto will not be translated into the <code>target</code> domain object.
	 *
	 * @param source The {@link ProductWithCustomersDto} object to translate.
	 *
	 * @return {@link ProductExample}, the resulting businessclass object.
	 */
	public ProductExample exampleFromDto(final ProductWithCustomersDto source) {
		Assert.notNull(source, "argument [source] may not be null");
		ProductExample result = new ProductExample();

		if (source.getProductNumber() != null) {
			result.setProductNumber(source.getProductNumber());
		}
		if (source.isOrderable() != null) {
			result.setOrderable(source.isOrderable());
		}
		if (source.getPrice() != null) {
			result.setPrice(source.getPrice());
		}

		return result;
	}

	/**
	 * Validate that the version of the DTO and the business object are valid.
	 * The DTO may only have a version if the domain object also has a version.
	 * When they both have a version and the DTO version is less, another user
	 * has updated the domain object in the meantime, if it is equal, all is
	 * well. If it is more, an unexpected situation occurs: the DTOs is more new
	 * then the domain object: this is not possible.
	 * 
	 * @param source
	 *            The DTO.
	 * @param target
	 *            The domain object target.
	 */
	private void validateVersion(final ProductWithCustomersDto source,
			final Product target) {
		final Integer sourceVersion = source.getVersion();
		final Integer targetVersion = target.getVersion();

		// FIXME the DTO translator should not know that -1 is the default unpersisted value!
		final boolean equals = (sourceVersion == null)
				? targetVersion == -1
				: sourceVersion.equals(targetVersion);

		if (!equals) {
			throw new ConcurrentUpdateException(
					"Versions of source and target do not match for dto "
							+ source + ", source is " + sourceVersion
							+ ", target is " + targetVersion + ".");
		}
	}
}
