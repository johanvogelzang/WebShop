
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:13 CEST 2011
 *     Application model: CustomerServiceModel
 *     Generator        : Mod4j ServiceDsl generator: LocalServiceImplBase.xpt
 */

package org.company.webshop.service;

import java.util.ArrayList;
import java.util.List;

import org.company.webshop.business.CustomerServiceModelDomainService;
import org.company.webshop.domain.Artist;
import org.company.webshop.domain.Customer;
import org.company.webshop.domain.CustomerExample;
import org.company.webshop.domain.Order;
import org.company.webshop.domain.OrderLine;
import org.company.webshop.domain.Person;
import org.company.webshop.domain.PersonExample;
import org.company.webshop.domain.Product;
import org.company.webshop.domain.Relation;
import org.company.webshop.service.dto.ArtistDto;
import org.company.webshop.service.dto.CustomerWithOrdersAndOrderLines;
import org.company.webshop.service.dto.FullCustomerDto;
import org.company.webshop.service.dto.FullProductDto;
import org.company.webshop.service.dto.OrderDto;
import org.company.webshop.service.dto.OrderLineDto;
import org.company.webshop.service.dto.OrderNumberAndDateDto;
import org.company.webshop.service.dto.PersonDto;
import org.company.webshop.service.dto.ProductWithCustomersDto;
import org.company.webshop.service.dto.RelationDto;
import org.company.webshop.service.dto.SimpleCustomerDto;
import org.company.webshop.service.dto.translators.ArtistDtoTranslator;
import org.company.webshop.service.dto.translators.CustomerWithOrdersAndOrderLinesTranslator;
import org.company.webshop.service.dto.translators.FullCustomerDtoTranslator;
import org.company.webshop.service.dto.translators.FullProductDtoTranslator;
import org.company.webshop.service.dto.translators.OrderDtoTranslator;
import org.company.webshop.service.dto.translators.OrderLineDtoTranslator;
import org.company.webshop.service.dto.translators.OrderNumberAndDateDtoTranslator;
import org.company.webshop.service.dto.translators.OrderWithOrderLinesDtoTranslator;
import org.company.webshop.service.dto.translators.PersonDtoTranslator;
import org.company.webshop.service.dto.translators.ProductWithCustomersDtoTranslator;
import org.company.webshop.service.dto.translators.RelationDtoTranslator;
import org.company.webshop.service.dto.translators.SimpleCustomerDtoTranslator;
import org.springframework.util.Assert;

/**
 * @author Generated by Mod4j
 */
abstract public class CustomerServiceModelLocalServiceImplBase
		implements
			CustomerServiceModelLocalService {

	protected CustomerServiceModelDomainService customerServiceModelDomainService;

	/**
	 * @param object
	 *            The customerServiceModelDomainService to set.
	 */
	public void setCustomerServiceModelDomainService(
			CustomerServiceModelDomainService object) {
		this.customerServiceModelDomainService = object;
	}

	/** 
	 * @return The customerServiceModelDomainService to get.
	 *
	 */
	public CustomerServiceModelDomainService getCustomerServiceModelDomainService() {
		return this.customerServiceModelDomainService;
	}

	protected SimpleCustomerDtoTranslator simpleCustomerDtoTranslator;

	/**
	 * @param object
	 *            The simpleCustomerDtoTranslator to set.
	 */
	public void setSimpleCustomerDtoTranslator(
			SimpleCustomerDtoTranslator object) {
		this.simpleCustomerDtoTranslator = object;
	}

	/** 
	 * @return The simpleCustomerDtoTranslator to get.
	 *
	 */
	public SimpleCustomerDtoTranslator getSimpleCustomerDtoTranslator() {
		return this.simpleCustomerDtoTranslator;
	}

	protected FullCustomerDtoTranslator fullCustomerDtoTranslator;

	/**
	 * @param object
	 *            The fullCustomerDtoTranslator to set.
	 */
	public void setFullCustomerDtoTranslator(FullCustomerDtoTranslator object) {
		this.fullCustomerDtoTranslator = object;
	}

	/** 
	 * @return The fullCustomerDtoTranslator to get.
	 *
	 */
	public FullCustomerDtoTranslator getFullCustomerDtoTranslator() {
		return this.fullCustomerDtoTranslator;
	}

	protected OrderDtoTranslator orderDtoTranslator;

	/**
	 * @param object
	 *            The orderDtoTranslator to set.
	 */
	public void setOrderDtoTranslator(OrderDtoTranslator object) {
		this.orderDtoTranslator = object;
	}

	/** 
	 * @return The orderDtoTranslator to get.
	 *
	 */
	public OrderDtoTranslator getOrderDtoTranslator() {
		return this.orderDtoTranslator;
	}

	protected OrderNumberAndDateDtoTranslator orderNumberAndDateDtoTranslator;

	/**
	 * @param object
	 *            The orderNumberAndDateDtoTranslator to set.
	 */
	public void setOrderNumberAndDateDtoTranslator(
			OrderNumberAndDateDtoTranslator object) {
		this.orderNumberAndDateDtoTranslator = object;
	}

	/** 
	 * @return The orderNumberAndDateDtoTranslator to get.
	 *
	 */
	public OrderNumberAndDateDtoTranslator getOrderNumberAndDateDtoTranslator() {
		return this.orderNumberAndDateDtoTranslator;
	}

	protected OrderWithOrderLinesDtoTranslator orderWithOrderLinesDtoTranslator;

	/**
	 * @param object
	 *            The orderWithOrderLinesDtoTranslator to set.
	 */
	public void setOrderWithOrderLinesDtoTranslator(
			OrderWithOrderLinesDtoTranslator object) {
		this.orderWithOrderLinesDtoTranslator = object;
	}

	/** 
	 * @return The orderWithOrderLinesDtoTranslator to get.
	 *
	 */
	public OrderWithOrderLinesDtoTranslator getOrderWithOrderLinesDtoTranslator() {
		return this.orderWithOrderLinesDtoTranslator;
	}

	protected OrderLineDtoTranslator orderLineDtoTranslator;

	/**
	 * @param object
	 *            The orderLineDtoTranslator to set.
	 */
	public void setOrderLineDtoTranslator(OrderLineDtoTranslator object) {
		this.orderLineDtoTranslator = object;
	}

	/** 
	 * @return The orderLineDtoTranslator to get.
	 *
	 */
	public OrderLineDtoTranslator getOrderLineDtoTranslator() {
		return this.orderLineDtoTranslator;
	}

	protected CustomerWithOrdersAndOrderLinesTranslator customerWithOrdersAndOrderLinesTranslator;

	/**
	 * @param object
	 *            The customerWithOrdersAndOrderLinesTranslator to set.
	 */
	public void setCustomerWithOrdersAndOrderLinesTranslator(
			CustomerWithOrdersAndOrderLinesTranslator object) {
		this.customerWithOrdersAndOrderLinesTranslator = object;
	}

	/** 
	 * @return The customerWithOrdersAndOrderLinesTranslator to get.
	 *
	 */
	public CustomerWithOrdersAndOrderLinesTranslator getCustomerWithOrdersAndOrderLinesTranslator() {
		return this.customerWithOrdersAndOrderLinesTranslator;
	}

	protected ProductWithCustomersDtoTranslator productWithCustomersDtoTranslator;

	/**
	 * @param object
	 *            The productWithCustomersDtoTranslator to set.
	 */
	public void setProductWithCustomersDtoTranslator(
			ProductWithCustomersDtoTranslator object) {
		this.productWithCustomersDtoTranslator = object;
	}

	/** 
	 * @return The productWithCustomersDtoTranslator to get.
	 *
	 */
	public ProductWithCustomersDtoTranslator getProductWithCustomersDtoTranslator() {
		return this.productWithCustomersDtoTranslator;
	}

	protected FullProductDtoTranslator fullProductDtoTranslator;

	/**
	 * @param object
	 *            The fullProductDtoTranslator to set.
	 */
	public void setFullProductDtoTranslator(FullProductDtoTranslator object) {
		this.fullProductDtoTranslator = object;
	}

	/** 
	 * @return The fullProductDtoTranslator to get.
	 *
	 */
	public FullProductDtoTranslator getFullProductDtoTranslator() {
		return this.fullProductDtoTranslator;
	}

	protected ArtistDtoTranslator artistDtoTranslator;

	/**
	 * @param object
	 *            The artistDtoTranslator to set.
	 */
	public void setArtistDtoTranslator(ArtistDtoTranslator object) {
		this.artistDtoTranslator = object;
	}

	/** 
	 * @return The artistDtoTranslator to get.
	 *
	 */
	public ArtistDtoTranslator getArtistDtoTranslator() {
		return this.artistDtoTranslator;
	}

	protected PersonDtoTranslator personDtoTranslator;

	/**
	 * @param object
	 *            The personDtoTranslator to set.
	 */
	public void setPersonDtoTranslator(PersonDtoTranslator object) {
		this.personDtoTranslator = object;
	}

	/** 
	 * @return The personDtoTranslator to get.
	 *
	 */
	public PersonDtoTranslator getPersonDtoTranslator() {
		return this.personDtoTranslator;
	}

	protected RelationDtoTranslator relationDtoTranslator;

	/**
	 * @param object
	 *            The relationDtoTranslator to set.
	 */
	public void setRelationDtoTranslator(RelationDtoTranslator object) {
		this.relationDtoTranslator = object;
	}

	/** 
	 * @return The relationDtoTranslator to get.
	 *
	 */
	public RelationDtoTranslator getRelationDtoTranslator() {
		return this.relationDtoTranslator;
	}

	/** [Generated by Mod4j 01]
	 * {@inheritDoc}
	 */
	public List<PersonDto> findPersons(PersonDto filter) {
		List<Person> found = null;
		List<PersonDto> result = new ArrayList<PersonDto>();

		PersonExample example = personDtoTranslator.exampleFromDto(filter);
		found = customerServiceModelDomainService.findPersonByExample(example);

		for (Person object : found) {
			PersonDto item = personDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/** [Generated by Mod4j 02]
	 * {@inheritDoc}
	 */
	public List<PersonDto> findPersons(final PersonDto exampleDto,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending) {

		PersonExample example = personDtoTranslator.exampleFromDto(exampleDto);

		List<Person> range = customerServiceModelDomainService
				.findPersonByExampleCount(example, firstResult, maxResults,
						sortProperty, isAscending);
		List<PersonDto> result = new ArrayList<PersonDto>();

		for (Person object : range) {
			PersonDto item = personDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public long countPersons(final PersonDto exampleDto) {
		return customerServiceModelDomainService
				.countPersons(personDtoTranslator.exampleFromDto(exampleDto));
	}

	/**
	 * {@inheritDoc}
	 */
	public OrderDto readOrder(Long id) {
		Order result = customerServiceModelDomainService.readOrder(id);
		return (result == null) ? null : orderDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public OrderLineDto readOrderLine(Long id) {
		OrderLine result = customerServiceModelDomainService.readOrderLine(id);
		return (result == null) ? null : orderLineDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createCustomer(SimpleCustomerDto object) {
		Long result = customerServiceModelDomainService
				.createCustomer(simpleCustomerDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public SimpleCustomerDto readCustomer(Long id) {
		Customer result = customerServiceModelDomainService.readCustomer(id);
		return (result == null) ? null : simpleCustomerDtoTranslator
				.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateCustomer(SimpleCustomerDto object) {
		Customer domainObject = customerServiceModelDomainService
				.readCustomer(object.getId());
		simpleCustomerDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateCustomer(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteCustomer(SimpleCustomerDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Customer existing = customerServiceModelDomainService
				.readCustomer(object.getId());
		customerServiceModelDomainService.deleteCustomer(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public List<SimpleCustomerDto> listCustomers() {
		List<Customer> all = customerServiceModelDomainService
				.listAllCustomers();
		List<SimpleCustomerDto> result = new ArrayList<SimpleCustomerDto>();

		for (Customer object : all) {
			SimpleCustomerDto item = simpleCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<SimpleCustomerDto> listCustomers(final int firstResult,
			final int maxResults) {
		List<Customer> range = customerServiceModelDomainService.listCustomers(
				firstResult, maxResults);
		List<SimpleCustomerDto> result = new ArrayList<SimpleCustomerDto>();

		for (Customer object : range) {
			SimpleCustomerDto item = simpleCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<SimpleCustomerDto> listCustomers(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		List<Customer> range = customerServiceModelDomainService.listCustomers(
				firstResult, maxResults, sortProperty, isAscending);
		List<SimpleCustomerDto> result = new ArrayList<SimpleCustomerDto>();

		for (Customer object : range) {
			SimpleCustomerDto item = simpleCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<FullCustomerDto> listFullCustomers() {
		List<Customer> all = customerServiceModelDomainService
				.listAllCustomers();
		List<FullCustomerDto> result = new ArrayList<FullCustomerDto>();

		for (Customer object : all) {
			FullCustomerDto item = fullCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<FullCustomerDto> listFullCustomers(final int firstResult,
			final int maxResults) {
		List<Customer> range = customerServiceModelDomainService.listCustomers(
				firstResult, maxResults);
		List<FullCustomerDto> result = new ArrayList<FullCustomerDto>();

		for (Customer object : range) {
			FullCustomerDto item = fullCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<FullCustomerDto> listFullCustomers(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		List<Customer> range = customerServiceModelDomainService.listCustomers(
				firstResult, maxResults, sortProperty, isAscending);
		List<FullCustomerDto> result = new ArrayList<FullCustomerDto>();

		for (Customer object : range) {
			FullCustomerDto item = fullCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<ArtistDto> listAllArtists() {
		List<Artist> all = customerServiceModelDomainService.listAllArtists();
		List<ArtistDto> result = new ArrayList<ArtistDto>();

		for (Artist object : all) {
			ArtistDto item = artistDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<ArtistDto> listAllArtists(final int firstResult,
			final int maxResults) {
		List<Artist> range = customerServiceModelDomainService.listArtists(
				firstResult, maxResults);
		List<ArtistDto> result = new ArrayList<ArtistDto>();

		for (Artist object : range) {
			ArtistDto item = artistDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<ArtistDto> listAllArtists(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		List<Artist> range = customerServiceModelDomainService.listArtists(
				firstResult, maxResults, sortProperty, isAscending);
		List<ArtistDto> result = new ArrayList<ArtistDto>();

		for (Artist object : range) {
			ArtistDto item = artistDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/** [Generated by Mod4j 01]
	 * {@inheritDoc}
	 */
	public List<SimpleCustomerDto> findCustomers(SimpleCustomerDto filter) {
		List<Customer> found = null;
		List<SimpleCustomerDto> result = new ArrayList<SimpleCustomerDto>();

		CustomerExample example = simpleCustomerDtoTranslator
				.exampleFromDto(filter);
		found = customerServiceModelDomainService
				.findCustomerByExample(example);

		for (Customer object : found) {
			SimpleCustomerDto item = simpleCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/** [Generated by Mod4j 02]
	 * {@inheritDoc}
	 */
	public List<SimpleCustomerDto> findCustomers(
			final SimpleCustomerDto exampleDto, final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {

		CustomerExample example = simpleCustomerDtoTranslator
				.exampleFromDto(exampleDto);

		List<Customer> range = customerServiceModelDomainService
				.findCustomerByExampleCount(example, firstResult, maxResults,
						sortProperty, isAscending);
		List<SimpleCustomerDto> result = new ArrayList<SimpleCustomerDto>();

		for (Customer object : range) {
			SimpleCustomerDto item = simpleCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public long countCustomers(final SimpleCustomerDto exampleDto) {
		return customerServiceModelDomainService
				.countCustomers(simpleCustomerDtoTranslator
						.exampleFromDto(exampleDto));
	}

	/** [Generated by Mod4j 01]
	 * {@inheritDoc}
	 */
	public List<FullCustomerDto> findCustomersFull(FullCustomerDto filter) {
		List<Customer> found = null;
		List<FullCustomerDto> result = new ArrayList<FullCustomerDto>();

		CustomerExample example = fullCustomerDtoTranslator
				.exampleFromDto(filter);
		found = customerServiceModelDomainService
				.findCustomerByExample(example);

		for (Customer object : found) {
			FullCustomerDto item = fullCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/** [Generated by Mod4j 02]
	 * {@inheritDoc}
	 */
	public List<FullCustomerDto> findCustomersFull(
			final FullCustomerDto exampleDto, final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {

		CustomerExample example = fullCustomerDtoTranslator
				.exampleFromDto(exampleDto);

		List<Customer> range = customerServiceModelDomainService
				.findCustomerByExampleCount(example, firstResult, maxResults,
						sortProperty, isAscending);
		List<FullCustomerDto> result = new ArrayList<FullCustomerDto>();

		for (Customer object : range) {
			FullCustomerDto item = fullCustomerDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public long countCustomers(final FullCustomerDto exampleDto) {
		return customerServiceModelDomainService
				.countCustomers(fullCustomerDtoTranslator
						.exampleFromDto(exampleDto));
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createRelation(RelationDto object) {
		Long result = customerServiceModelDomainService
				.createRelation(relationDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createPerson(PersonDto object) {
		Long result = customerServiceModelDomainService
				.createPerson(personDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createCustomer(FullCustomerDto object) {
		Long result = customerServiceModelDomainService
				.createCustomer(fullCustomerDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createProduct(ProductWithCustomersDto object) {
		Long result = customerServiceModelDomainService
				.createProduct(productWithCustomersDtoTranslator
						.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createProduct(FullProductDto object) {
		Long result = customerServiceModelDomainService
				.createProduct(fullProductDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createCustomer(CustomerWithOrdersAndOrderLines object) {
		Long result = customerServiceModelDomainService
				.createCustomer(customerWithOrdersAndOrderLinesTranslator
						.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createArtist(ArtistDto object) {
		Long result = customerServiceModelDomainService
				.createArtist(artistDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public RelationDto readRelationAsRelationDto(Long id) {
		Relation result = customerServiceModelDomainService.readRelation(id);
		return (result == null) ? null : relationDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public PersonDto readPersonAsPersonDto(Long id) {
		Person result = customerServiceModelDomainService.readPerson(id);
		return (result == null) ? null : personDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public FullCustomerDto readCustomerAsFullCustomerDto(Long id) {
		Customer result = customerServiceModelDomainService.readCustomer(id);
		return (result == null) ? null : fullCustomerDtoTranslator
				.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public ProductWithCustomersDto readProductAsProductWithCustomersDto(Long id) {
		Product result = customerServiceModelDomainService.readProduct(id);
		return (result == null) ? null : productWithCustomersDtoTranslator
				.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public FullProductDto readProductAsFullProductDto(Long id) {
		Product result = customerServiceModelDomainService.readProduct(id);
		return (result == null) ? null : fullProductDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public CustomerWithOrdersAndOrderLines readCustomerAsCustomerWithOrdersAndOrderLines(
			Long id) {
		Customer result = customerServiceModelDomainService.readCustomer(id);
		return (result == null)
				? null
				: customerWithOrdersAndOrderLinesTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public ArtistDto readArtistAsArtistDto(Long id) {
		Artist result = customerServiceModelDomainService.readArtist(id);
		return (result == null) ? null : artistDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateRelation(RelationDto object) {
		Relation domainObject = customerServiceModelDomainService
				.readRelation(object.getId());
		relationDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateRelation(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updatePerson(PersonDto object) {
		Person domainObject = customerServiceModelDomainService
				.readPerson(object.getId());
		personDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updatePerson(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateCustomer(FullCustomerDto object) {
		Customer domainObject = customerServiceModelDomainService
				.readCustomer(object.getId());
		fullCustomerDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateCustomer(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateProduct(ProductWithCustomersDto object) {
		Product domainObject = customerServiceModelDomainService
				.readProduct(object.getId());
		productWithCustomersDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateProduct(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateProduct(FullProductDto object) {
		Product domainObject = customerServiceModelDomainService
				.readProduct(object.getId());
		fullProductDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateProduct(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateCustomer(CustomerWithOrdersAndOrderLines object) {
		Customer domainObject = customerServiceModelDomainService
				.readCustomer(object.getId());
		customerWithOrdersAndOrderLinesTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateCustomer(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateArtist(ArtistDto object) {
		Artist domainObject = customerServiceModelDomainService
				.readArtist(object.getId());
		artistDtoTranslator.fromDto(object, domainObject);
		customerServiceModelDomainService.updateArtist(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteRelation(RelationDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Relation existing = customerServiceModelDomainService
				.readRelation(object.getId());
		customerServiceModelDomainService.deleteRelation(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deletePerson(PersonDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Person existing = customerServiceModelDomainService.readPerson(object
				.getId());
		customerServiceModelDomainService.deletePerson(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteCustomer(FullCustomerDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Customer existing = customerServiceModelDomainService
				.readCustomer(object.getId());
		customerServiceModelDomainService.deleteCustomer(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteProduct(ProductWithCustomersDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Product existing = customerServiceModelDomainService.readProduct(object
				.getId());
		customerServiceModelDomainService.deleteProduct(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteProduct(FullProductDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Product existing = customerServiceModelDomainService.readProduct(object
				.getId());
		customerServiceModelDomainService.deleteProduct(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteCustomer(CustomerWithOrdersAndOrderLines object) {
		Assert.notNull(object, "argument [object] may not be null");
		Customer existing = customerServiceModelDomainService
				.readCustomer(object.getId());
		customerServiceModelDomainService.deleteCustomer(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteArtist(ArtistDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Artist existing = customerServiceModelDomainService.readArtist(object
				.getId());
		customerServiceModelDomainService.deleteArtist(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public long countCustomers() {
		return customerServiceModelDomainService.countCustomers();
	}

	/**
	 * {@inheritDoc}
	 */
	public long countArtists() {
		return customerServiceModelDomainService.countArtists();
	}

	// Association related service methods

	/**
	 * {@inheritDoc}
	 */
	public void addToOrderLines(OrderDto whole, OrderLineDto part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		OrderLine partBusinessObject = customerServiceModelDomainService
				.readOrderLine(part.getId());
		Order mainBusinessObject = customerServiceModelDomainService
				.readOrder(whole.getId());
		customerServiceModelDomainService.addToOrderLines(mainBusinessObject,
				partBusinessObject);
		return;
	}

	/**
	 * {@inheritDoc}
	 */
	public void removeFromOrderLines(OrderDto whole, OrderLineDto part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		OrderLine partObject = customerServiceModelDomainService
				.readOrderLine(part.getId());
		Order wholeObject = customerServiceModelDomainService.readOrder(whole
				.getId());
		customerServiceModelDomainService.removeFromOrderLines(wholeObject,
				partObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void addToOrders(SimpleCustomerDto whole, OrderDto part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		Order partBusinessObject = customerServiceModelDomainService
				.readOrder(part.getId());
		Customer mainBusinessObject = customerServiceModelDomainService
				.readCustomer(whole.getId());
		customerServiceModelDomainService.addToOrders(mainBusinessObject,
				partBusinessObject);
		return;
	}

	/**
	 * {@inheritDoc}
	 */
	public void removeFromOrders(SimpleCustomerDto whole, OrderDto part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		Order partObject = customerServiceModelDomainService.readOrder(part
				.getId());
		Customer wholeObject = customerServiceModelDomainService
				.readCustomer(whole.getId());
		customerServiceModelDomainService.removeFromOrders(wholeObject,
				partObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public List<OrderNumberAndDateDto> getOrders(SimpleCustomerDto source) {
		Assert.notNull(source, "argument [source] may not be null");
		Customer businessSource = customerServiceModelDomainService
				.readCustomer(source.getId());
		List<Order> parts = customerServiceModelDomainService
				.getOrders(businessSource);
		List<OrderNumberAndDateDto> result = new ArrayList<OrderNumberAndDateDto>();
		for (Order element : parts) {
			OrderNumberAndDateDto item = orderNumberAndDateDtoTranslator
					.toDto(element);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public SimpleCustomerDto getCustomer(OrderDto source) {
		Assert.notNull(source, "argument [source] may not be null");
		Customer target = null;
		Order sourceBusinessObject = customerServiceModelDomainService
				.readOrder(source.getId());
		target = customerServiceModelDomainService
				.getCustomer(sourceBusinessObject);
		return simpleCustomerDtoTranslator.toDto(target);
	}

	/**
	 * {@inheritDoc}
	 */
	public void setCustomer(OrderDto whole, SimpleCustomerDto part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Customer partBusinessObject = null;
		if (part != null) {
			partBusinessObject = customerServiceModelDomainService
					.readCustomer(part.getId());
		}
		Order mainBusinessObject = customerServiceModelDomainService
				.readOrder(whole.getId());
		customerServiceModelDomainService.setCustomer(mainBusinessObject,
				partBusinessObject);
		return;
	}

}
