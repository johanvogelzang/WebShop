
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:08 CEST 2011
 *     Application model: Product
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.webshop.domain;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.company.webshop.domain.Customer;
import org.company.webshop.domain.OrderLine;
import org.company.webshop.domain.Product;
import org.company.webshop.domain.Record;
import org.mod4j.runtime.validation.BusinessRuleValidationSupport;
import org.mod4j.runtime.validation.NotNullValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class ProductImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for ProductImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.webshop.domain.Product[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("productNumber=");
		result.append(productNumber);

		result.append(",");
		result.append("price=");
		result.append(price);

		result.append(",");
		result.append("inStock=");
		result.append(inStock);

		result.append(",");
		result.append("orderable=");
		result.append(orderable);

		result.append(",");
		result.append("minimalQuantity=");
		result.append(minimalQuantity);

		result.append("]");
		return result.toString();
	}

	/**
	 *  productNumber: 
	 */
	protected String productNumber;

	/**
	 *  price: 
	 */
	protected Float price;

	/**
	 *  inStock: 
	 */
	protected Boolean inStock = false;

	/**
	 *  orderable: 
	 */
	protected Boolean orderable;

	/**
	 *  minimalQuantity: 
	 */
	protected Integer minimalQuantity = 1;

	/**
	 *  buyers: Many to Many unidirectional: Products have been bought by zero or more buyers.
	 */
	private Set<Customer> buyers = new HashSet<Customer>();

	/**
	 * @return buyers (Set<Customer>).
	 */
	public Set<Customer> getBuyers() {
		return Collections.unmodifiableSet(this.buyers);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return buyers (Set<Customer>)
	 * @return buyers (Set<Customer>)
	 *         with the given id.
	 */
	public Customer getFromBuyers(Long id) {
		if (id == null) {
			return null;
		}
		for (Customer customer : this.buyers) {
			if (id.equals(customer.getId())) {
				return customer;
			}
		}
		return null;
	}

	/**
	 * Implements adding single element to a collection.
	 */
	public boolean addToBuyers(Customer element) {
		if (element == null) {
			return false;
		}
		if (!buyers.contains(element)) {
			buyers.add(element);
			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 * Implements removing a single element from a collection.
	 */
	public boolean removeFromBuyers(Customer element) {
		if (element == null) {
			return false;
		}
		if (buyers.contains(element)) {
			this.buyers.remove(element);
			validation.validate();
			return true;
		}
		return false;
	}

	private Set<Record> record = new HashSet<Record>();

	public Set<Record> getRecord() {
		return this.record;
	}

	/**
	 * Implements the setter of association end 
	 * 
	 * @param element 
	 */
	public void addToRecord(Record element) {
		if (element == null) {
			return;
		}
		if (this.record.contains(element)) {
			return;
		}
		this.record.add(element);
		if (element.getProduct() != null) {
			element.getProduct().z_internalRemoveFromRecord(element);
		}
		element.z_internalSetProduct((Product) this);

		validation.validate();
	}

	public void removeFromRecord(Record element) {
		if (element == null) {
			return;
		}
		this.record.remove(element);
		element.z_internalRemoveProduct((Product) this);

		validation.validate();
	}

	/**
	 * Should NOT be used by clients!
	 * Implements the correct setting of the link for + owner 
	 *                  when a single element is added to it.
	 * 
	 * @param element 
	 */
	public void z_internalAddToRecord(Record element) {
		this.record.add(element);
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link for + owner 
	 *                  when a single element is removed to it.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromRecord(Record element) {
		this.record.remove(element);
	}

	private OrderLine orderLine;

	/**
	 * @return orderLine (OrderLine) 
	 */
	public OrderLine getOrderLine() {
		return this.orderLine;
	}

	/**
	 * Implements adding single element to a collection
	 */
	public void setOrderLine(OrderLine element) {
		if (this.orderLine != element) { // prevent infinite loop

			if (this.orderLine != null) { // there is a previous link Y
				this.orderLine.z_internalRemoveproduct((Product) this);
			}

			this.orderLine = element; // set the field to the new value

			if (element != null) {
				// make the new link aware of this 
				element.setProduct((Product) this);
			}

			validation.validate();
		}
	}

	/**
	 * This operation should NOT be used by clients.
	 * It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveorderLine(OrderLine element) {
		this.orderLine = null;
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(Product.class,
				"productNumber"));

		validation.addValidator(new NotNullValidator(Product.class, "price"));

		validation.addValidator(new NotNullValidator(Product.class, "inStock"));

		validation
				.addValidator(new NotNullValidator(Product.class, "orderable"));

		validation.addValidator(new NotNullValidator(Product.class,
				"minimalQuantity"));

	}

	/**
	 * Default no-argument constructor for ProductImplBase 
	 */
	protected ProductImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for ProductImplBase
	 *
	 * @param productNumber (String) 
	 * @param price (Float) 
	 * @param orderable (Boolean) 
	 */
	public ProductImplBase(String productNumber, Float price, Boolean orderable) {

		this.productNumber = productNumber;
		this.price = price;
		this.orderable = orderable;
		addValidators();
		validation.validate();
	}

	/**
	 * @return productNumber (String) 
	 */
	public String getProductNumber() {
		return this.productNumber;
	}

	/**
	 * @return price (Float) 
	 */
	public Float getPrice() {
		return this.price;
	}

	/**
	 * @return inStock (Boolean) 
	 */
	public Boolean isInStock() {
		return this.inStock;
	}

	/**
	 * Extra getter for Boolean properties, because the "is<property>()" syntax does not
	 * always work.
	 *
	 * @return inStock (Boolean) 
	 */
	public Boolean getInStock() {
		return isInStock();
	}

	/**
	 * @return orderable (Boolean) 
	 */
	public Boolean isOrderable() {
		return this.orderable;
	}

	/**
	 * Extra getter for Boolean properties, because the "is<property>()" syntax does not
	 * always work.
	 *
	 * @return orderable (Boolean) 
	 */
	public Boolean getOrderable() {
		return isOrderable();
	}

	/**
	 * @return minimalQuantity (Integer) 
	 */
	public Integer getMinimalQuantity() {
		return this.minimalQuantity;
	}

	/**
	 * @param productNumber (String) 
	 */
	public void setProductNumber(final String productNumber) {
		this.productNumber = productNumber;
		validation.validate();
	}

	/**
	 * @param price (Float) 
	 */
	public void setPrice(final Float price) {
		this.price = price;
		validation.validate();
	}

	/**
	 * @param inStock (Boolean) 
	 */
	public void setInStock(final Boolean inStock) {
		this.inStock = inStock;
		validation.validate();
	}

	/**
	 * @param orderable (Boolean) 
	 */
	public void setOrderable(final Boolean orderable) {
		this.orderable = orderable;
		validation.validate();
	}

	/**
	 * @param minimalQuantity (Integer) 
	 */
	public void setMinimalQuantity(final Integer minimalQuantity) {
		this.minimalQuantity = minimalQuantity;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
