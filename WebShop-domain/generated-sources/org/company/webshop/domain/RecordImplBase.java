
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:08 CEST 2011
 *     Application model: Record
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.webshop.domain;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.company.webshop.domain.Artist;
import org.company.webshop.domain.Product;
import org.company.webshop.domain.Record;
import org.mod4j.runtime.validation.BusinessRuleValidationSupport;
import org.mod4j.runtime.validation.NotNullValidator;

/**
 * A Record is a representation of a physical medium containing one or more musical compositions.
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class RecordImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for RecordImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.webshop.domain.Record[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("asin=");
		result.append(asin);

		result.append(",");
		result.append("title=");
		result.append(title);

		result.append(",");
		result.append("mediumCode=");
		result.append(mediumCode);

		result.append(",");
		result.append("price=");
		result.append(price);

		result.append(",");
		result.append("type=");
		result.append(type);

		result.append("]");
		return result.toString();
	}

	/**
	 *  asin: 
	 */
	protected String asin;

	/**
	 *  title: 
	 */
	protected String title = "Title unknown";

	/**
	 *  mediumCode: 
	 */
	protected Integer mediumCode = 111;

	/**
	 *  price: 
	 */
	protected Float price;

	/**
	 *  type: 
	 */
	protected RecordTypeEnum type;

	/**
	 *  contributors: Many to Many bidirectional: Records have been made by zero or more contributors.
	 */
	private Set<Artist> contributors = new HashSet<Artist>();

	/**
	 * @return contributors (Set<Artist>).
	 */
	public Set<Artist> getContributors() {
		return Collections.unmodifiableSet(this.contributors);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return contributors (Set<Artist>)
	 * @return contributors (Set<Artist>)
	 *         with the given id.
	 */
	public Artist getFromContributors(Long id) {
		if (id == null) {
			return null;
		}
		for (Artist artist : this.contributors) {
			if (id.equals(artist.getId())) {
				return artist;
			}
		}
		return null;
	}

	/**
	 * Implements adding single element to a collection.
	 */
	public boolean addToContributors(Artist element) {
		if (element == null) {
			return false;
		}
		if (!contributors.contains(element)) {
			contributors.add(element);
			element.addToRecords((Record) this);
			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 * Implements removing a single element from a collection.
	 */
	public boolean removeFromContributors(Artist element) {
		if (element == null) {
			return false;
		}
		if (contributors.contains(element)) {
			this.contributors.remove(element);
			element.removeFromRecords((Record) this);
			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 *  product: Many to One bidirectional: A record is sold as a product.
	 */
	private Product product;

	/**
	 * @return product (<Product>) 
	 */
	public Product getProduct() {
		return this.product;
	}

	/**
	 * Implements adding single element to a collection
	 */
	public void setProduct(Product element) {
		if (this.product != element) {

			if (this.product != null) {
				this.product.z_internalRemoveFromRecord((Record) this);
			}

			this.product = element;

			if (element != null) {
				element.z_internalAddToRecord((Record) this);
			}

			validation.validate();
		}
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalSetProduct(Product element) {
		this.product = element;
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveProduct(Product element) {
		this.product = null;
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(Record.class, "asin"));

		validation.addValidator(new NotNullValidator(Record.class, "title"));

		validation
				.addValidator(new NotNullValidator(Record.class, "mediumCode"));

		validation.addValidator(new NotNullValidator(Record.class, "price"));

		validation.addValidator(new NotNullValidator(Record.class, "type"));

	}

	/**
	 * Default no-argument constructor for RecordImplBase 
	 */
	protected RecordImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for RecordImplBase
	 *
	 * @param asin (String) 
	 * @param price (Float) 
	 * @param type (RecordTypeEnum) 
	 */
	public RecordImplBase(String asin, Float price, RecordTypeEnum type) {

		this.asin = asin;
		this.price = price;
		this.type = type;
		addValidators();
		validation.validate();
	}

	/**
	 * @return asin (String) 
	 */
	public String getAsin() {
		return this.asin;
	}

	/**
	 * @return title (String) 
	 */
	public String getTitle() {
		return this.title;
	}

	/**
	 * @return mediumCode (Integer) 
	 */
	public Integer getMediumCode() {
		return this.mediumCode;
	}

	/**
	 * @return price (Float) 
	 */
	public Float getPrice() {
		return this.price;
	}

	/**
	 * @return type (RecordTypeEnum) 
	 */
	public RecordTypeEnum getType() {
		return this.type;
	}

	/**
	 * @param asin (String) 
	 */
	public void setAsin(final String asin) {
		this.asin = asin;
		validation.validate();
	}

	/**
	 * @param title (String) 
	 */
	public void setTitle(final String title) {
		this.title = title;
		validation.validate();
	}

	/**
	 * @param mediumCode (Integer) 
	 */
	public void setMediumCode(final Integer mediumCode) {
		this.mediumCode = mediumCode;
		validation.validate();
	}

	/**
	 * @param price (Float) 
	 */
	public void setPrice(final Float price) {
		this.price = price;
		validation.validate();
	}

	/**
	 * @param type (RecordTypeEnum) 
	 */
	public void setType(final RecordTypeEnum type) {
		this.type = type;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
