
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:15 CEST 2011
 *     Application model: StateChangeBusinessRule
 *     Generator        : Mod4j ServiceDsl generator: LocalServiceImplBase.xpt
 */

package org.company.recordshop.service;

import java.util.List;
import java.util.ArrayList;
import org.springframework.util.Assert;

import org.company.recordshop.business.StateChangeBusinessRuleDomainService;

import org.company.recordshop.service.dto.OrganisatieDto;
import org.company.recordshop.service.dto.KaderDto;
import org.company.recordshop.service.dto.CasusOverlegDto;

import org.company.recordshop.service.dto.translators.OrganisatieDtoTranslator;
import org.company.recordshop.domain.Organisatie;
import org.company.recordshop.domain.OrganisatieExample;
import org.company.recordshop.service.dto.translators.KaderDtoTranslator;
import org.company.recordshop.domain.Kader;
import org.company.recordshop.domain.KaderExample;
import org.company.recordshop.service.dto.translators.CasusOverlegDtoTranslator;
import org.company.recordshop.domain.CasusOverleg;
import org.company.recordshop.domain.CasusOverlegExample;

/**
 * @author Generated by Mod4j
 */
abstract public class StateChangeBusinessRuleLocalServiceImplBase
		implements
			StateChangeBusinessRuleLocalService {

	protected StateChangeBusinessRuleDomainService stateChangeBusinessRuleDomainService;

	/**
	 * @param object
	 *            The stateChangeBusinessRuleDomainService to set.
	 */
	public void setStateChangeBusinessRuleDomainService(
			StateChangeBusinessRuleDomainService object) {
		this.stateChangeBusinessRuleDomainService = object;
	}

	/** 
	 * @return The stateChangeBusinessRuleDomainService to get.
	 *
	 */
	public StateChangeBusinessRuleDomainService getStateChangeBusinessRuleDomainService() {
		return this.stateChangeBusinessRuleDomainService;
	}

	protected OrganisatieDtoTranslator organisatieDtoTranslator;

	/**
	 * @param object
	 *            The organisatieDtoTranslator to set.
	 */
	public void setOrganisatieDtoTranslator(OrganisatieDtoTranslator object) {
		this.organisatieDtoTranslator = object;
	}

	/** 
	 * @return The organisatieDtoTranslator to get.
	 *
	 */
	public OrganisatieDtoTranslator getOrganisatieDtoTranslator() {
		return this.organisatieDtoTranslator;
	}

	protected KaderDtoTranslator kaderDtoTranslator;

	/**
	 * @param object
	 *            The kaderDtoTranslator to set.
	 */
	public void setKaderDtoTranslator(KaderDtoTranslator object) {
		this.kaderDtoTranslator = object;
	}

	/** 
	 * @return The kaderDtoTranslator to get.
	 *
	 */
	public KaderDtoTranslator getKaderDtoTranslator() {
		return this.kaderDtoTranslator;
	}

	protected CasusOverlegDtoTranslator casusOverlegDtoTranslator;

	/**
	 * @param object
	 *            The casusOverlegDtoTranslator to set.
	 */
	public void setCasusOverlegDtoTranslator(CasusOverlegDtoTranslator object) {
		this.casusOverlegDtoTranslator = object;
	}

	/** 
	 * @return The casusOverlegDtoTranslator to get.
	 *
	 */
	public CasusOverlegDtoTranslator getCasusOverlegDtoTranslator() {
		return this.casusOverlegDtoTranslator;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createOrganisatie(OrganisatieDto object) {
		Long result = stateChangeBusinessRuleDomainService
				.createOrganisatie(organisatieDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createCasusOverleg(CasusOverlegDto object) {
		Long result = stateChangeBusinessRuleDomainService
				.createCasusOverleg(casusOverlegDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createKader(KaderDto object) {
		Long result = stateChangeBusinessRuleDomainService
				.createKader(kaderDtoTranslator.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public OrganisatieDto readOrganisatieAsOrganisatieDto(Long id) {
		Organisatie result = stateChangeBusinessRuleDomainService
				.readOrganisatie(id);
		return (result == null) ? null : organisatieDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public CasusOverlegDto readCasusOverlegAsCasusOverlegDto(Long id) {
		CasusOverleg result = stateChangeBusinessRuleDomainService
				.readCasusOverleg(id);
		return (result == null) ? null : casusOverlegDtoTranslator
				.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public KaderDto readKaderAsKaderDto(Long id) {
		Kader result = stateChangeBusinessRuleDomainService.readKader(id);
		return (result == null) ? null : kaderDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateOrganisatie(OrganisatieDto object) {
		Organisatie domainObject = stateChangeBusinessRuleDomainService
				.readOrganisatie(object.getId());
		organisatieDtoTranslator.fromDto(object, domainObject);
		stateChangeBusinessRuleDomainService.updateOrganisatie(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateCasusOverleg(CasusOverlegDto object) {
		CasusOverleg domainObject = stateChangeBusinessRuleDomainService
				.readCasusOverleg(object.getId());
		casusOverlegDtoTranslator.fromDto(object, domainObject);
		stateChangeBusinessRuleDomainService.updateCasusOverleg(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateKader(KaderDto object) {
		Kader domainObject = stateChangeBusinessRuleDomainService
				.readKader(object.getId());
		kaderDtoTranslator.fromDto(object, domainObject);
		stateChangeBusinessRuleDomainService.updateKader(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteOrganisatie(OrganisatieDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Organisatie existing = stateChangeBusinessRuleDomainService
				.readOrganisatie(object.getId());
		stateChangeBusinessRuleDomainService.deleteOrganisatie(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteCasusOverleg(CasusOverlegDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		CasusOverleg existing = stateChangeBusinessRuleDomainService
				.readCasusOverleg(object.getId());
		stateChangeBusinessRuleDomainService.deleteCasusOverleg(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteKader(KaderDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Kader existing = stateChangeBusinessRuleDomainService.readKader(object
				.getId());
		stateChangeBusinessRuleDomainService.deleteKader(existing);
	}

	// Association related service methods

}
