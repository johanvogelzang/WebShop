
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: SimpleCustomerDto
 *     Generator        : Mod4j DataContractDsl generator: dtoBean.xpt
 */

package org.company.recordshop.service.dto;

import java.util.HashSet;
import java.util.Set;

import org.joda.time.DateTime;
import org.mod4j.runtime.dto.AbstractDto;

/**
 * A simple Customer transfer object with a subset of Customer attributes.
 *
 * @author generated by Mod4j
 */
public class SimpleCustomerDto extends AbstractDto {

	/**
	 *  customerNr: 
	 */

	private Integer customerNr;

	/**
	 *  lastName: 
	 */

	private String lastName;

	/**
	 *  firstName: 
	 */

	private String firstName;

	/**
	 *  blackListed: 
	 */

	private Boolean blackListed = false;

	/**
	 *  username: 
	 */

	private String username;

	/**
	 *  sexe: 
	 */

	private SexeEnumDto sexe = SexeEnumDto.MALE;

	/**
	 *  birthDate: 
	 */

	private DateTime birthDate;

	/**
	 *  orders: 
	 */

	private Set<OrderNumberAndDateDto> orders = new HashSet<OrderNumberAndDateDto>();

	/**
	 *  idols: 
	 */

	private Set<ArtistDto> idols = new HashSet<ArtistDto>();

	/**
	 *  relatedTo: 
	 */

	private Set<DisLikesDto> relatedTo = new HashSet<DisLikesDto>();

	/**
	 * Default no-argument constructor.
	 */
	public SimpleCustomerDto() {
		super();
	}

	/**
	 * Constructor for use by the DTO Translator.
	 * 
	 * @param id
	 *            The ID of the referenced business object.
	 * @param version
	 *            The version of the referenced business object.
	 */
	public SimpleCustomerDto(final Long id, final Integer version) {
		super(id, version);
	}

	/**
	 * @param customerNr (Integer) 
	 */
	public void setCustomerNr(final Integer customerNr) {
		this.customerNr = customerNr;
	}

	/**
	 *
	 * @return customerNr (Integer) 
	 */
	public Integer getCustomerNr() {
		return this.customerNr;
	}

	/**
	 * @param lastName (String) 
	 */
	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}

	/**
	 *
	 * @return lastName (String) 
	 */
	public String getLastName() {
		return this.lastName;
	}

	/**
	 * @param firstName (String) 
	 */
	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}

	/**
	 *
	 * @return firstName (String) 
	 */
	public String getFirstName() {
		return this.firstName;
	}

	/**
	 * @param blackListed (Boolean) 
	 */
	public void setBlackListed(final Boolean blackListed) {
		this.blackListed = blackListed;
	}

	/**
	 *
	 * @return blackListed (Boolean) 
	 */
	public Boolean isBlackListed() {
		return this.blackListed;
	}

	/**
	 * @param username (String) 
	 */
	public void setUsername(final String username) {
		this.username = username;
	}

	/**
	 *
	 * @return username (String) 
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * @param sexe (SexeEnumDto) 
	 */
	public void setSexe(final SexeEnumDto sexe) {
		this.sexe = sexe;
	}

	/**
	 *
	 * @return sexe (SexeEnumDto) 
	 */
	public SexeEnumDto getSexe() {
		return this.sexe;
	}

	/**
	 * @param birthDate (DateTime) 
	 */
	public void setBirthDate(final DateTime birthDate) {
		this.birthDate = birthDate;
	}

	/**
	 *
	 * @return birthDate (DateTime) 
	 */
	public DateTime getBirthDate() {
		return this.birthDate;
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return orderNumberAndDateDto (OrderNumberAndDateDto)
	 *         with the given id.
	 */
	public OrderNumberAndDateDto getFromOrders(Long id) {
		if (id == null) {
			return null;
		}
		for (OrderNumberAndDateDto orderNumberAndDateDto : this.orders) {
			if (id.equals(orderNumberAndDateDto.getId())) {
				return orderNumberAndDateDto;
			}
		}
		return null;
	}
	/**
	 * @return orders (Set<OrderNumberAndDateDto>) 
	 */
	public Set<OrderNumberAndDateDto> getOrders() {
		return this.orders;
	}

	/**
	 * Adds a single element to the orders collection
	 *
	 * @param element The element to add.
	 */
	public void addToOrders(OrderNumberAndDateDto element) {

		if (element == null || this.orders.contains(element)) {
			return;
		}
		this.orders.add(element);
	}

	/**
	 * Removes a single element from the orders collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFromOrders(OrderNumberAndDateDto element) {

		if (element == null) {
			return;
		}
		this.orders.remove(element);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return artistDto (ArtistDto)
	 *         with the given id.
	 */
	public ArtistDto getFromIdols(Long id) {
		if (id == null) {
			return null;
		}
		for (ArtistDto artistDto : this.idols) {
			if (id.equals(artistDto.getId())) {
				return artistDto;
			}
		}
		return null;
	}
	/**
	 * @return idols (Set<ArtistDto>) 
	 */
	public Set<ArtistDto> getIdols() {
		return this.idols;
	}

	/**
	 * Adds a single element to the idols collection
	 *
	 * @param element The element to add.
	 */
	public void addToIdols(ArtistDto element) {

		if (element == null || this.idols.contains(element)) {
			return;
		}
		this.idols.add(element);
	}

	/**
	 * Removes a single element from the idols collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFromIdols(ArtistDto element) {

		if (element == null) {
			return;
		}
		this.idols.remove(element);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return disLikesDto (DisLikesDto)
	 *         with the given id.
	 */
	public DisLikesDto getFromRelatedTo(Long id) {
		if (id == null) {
			return null;
		}
		for (DisLikesDto disLikesDto : this.relatedTo) {
			if (id.equals(disLikesDto.getId())) {
				return disLikesDto;
			}
		}
		return null;
	}
	/**
	 * @return relatedTo (Set<DisLikesDto>) 
	 */
	public Set<DisLikesDto> getRelatedTo() {
		return this.relatedTo;
	}

	/**
	 * Adds a single element to the relatedTo collection
	 *
	 * @param element The element to add.
	 */
	public void addToRelatedTo(DisLikesDto element) {

		if (element == null || this.relatedTo.contains(element)) {
			return;
		}
		this.relatedTo.add(element);
	}

	/**
	 * Removes a single element from the relatedTo collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFromRelatedTo(DisLikesDto element) {

		if (element == null) {
			return;
		}
		this.relatedTo.remove(element);
	}

	/**
	 * Sets all attributes that have a default value, to their default values.
	 *
	 * @author Generated by Mod4j
	 */
	public void clear() {
		customerNr = null;
		lastName = null;
		firstName = null;
		blackListed = null;
		username = null;
		sexe = null;
		birthDate = null;

	}

	/**
	 * toString method for SimpleCustomerDto
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.service.dto.SimpleCustomerDto[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("customerNr=");
		result.append(customerNr);

		result.append(",");
		result.append("lastName=");
		result.append(lastName);

		result.append(",");
		result.append("firstName=");
		result.append(firstName);

		result.append(",");
		result.append("blackListed=");
		result.append(blackListed);

		result.append(",");
		result.append("username=");
		result.append(username);

		result.append(",");
		result.append("sexe=");
		result.append(sexe);

		result.append(",");
		result.append("birthDate=");
		result.append(birthDate);

		result.append("]");
		return result.toString();
	}

}
