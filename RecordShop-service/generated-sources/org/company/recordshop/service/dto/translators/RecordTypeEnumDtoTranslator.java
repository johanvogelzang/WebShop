
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: RecordTypeEnumDto
 *     Generator        : Mod4j DatacontractDsl generator: EnumTranslators.xpt
 */

package org.company.recordshop.service.dto.translators;

import org.company.recordshop.domain.RecordTypeEnum;
import org.company.recordshop.service.dto.RecordTypeEnumDto;

/**
 * Translator for translating RecordTypeEnum business classes from- and to RecordTypeEnumDto data transfer objects. 
 *
 * @author generated by Mod4j
 */
public class RecordTypeEnumDtoTranslator {

	// Protected constructor is sufficient to suppress unauthorized calls to the constructor
	protected RecordTypeEnumDtoTranslator() {
	}

	/**
	 * SingletonHolder is loaded on the first execution of Singleton.getInstance() 
	 * or the first access to SingletonHolder.INSTANCE , not before.
	 */
	private static class SingletonHolder {
		private final static RecordTypeEnumDtoTranslator INSTANCE = new RecordTypeEnumDtoTranslator();
	}

	public static RecordTypeEnumDtoTranslator getInstance() {
		return SingletonHolder.INSTANCE;
	}

	/**
	 * Translates a RecordTypeEnumDto enumeration dto into a RecordTypeEnum enumeration.
	 *
	 * @param source The {@link RecordTypeEnumDto} enumeration dto to translate.
	 *
	 * @return {@link RecordTypeEnum}, the resulting enumeration.
	 */
	public synchronized RecordTypeEnum fromDto(final RecordTypeEnumDto source) {

		if (source == null) {
			return null;
		}
		return RecordTypeEnum.value(source.id());
	}

	/**
	 * Translates a RecordTypeEnum enumeration into a RecordTypeEnumDto enumeration dto.
	 *
	 * @param source The {@link RecordTypeEnum} enumeration to translate.
	 *
	 * @return {@link RecordTypeEnumDto}, the resulting enumeration dto.
	 */
	public synchronized RecordTypeEnumDto toDto(final RecordTypeEnum source) {

		if (source == null) {
			return null;
		}
		return RecordTypeEnumDto.value(source.id());
	}
}
