
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: OrderWithOrderLinesDto
 *     Generator        : Mod4j DatacontractDsl generator: Translators.xpt
 */

package org.company.recordshop.service.dto.translators;

import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import org.springframework.util.Assert;
import org.mod4j.runtime.exception.ConcurrentUpdateException;
import org.company.recordshop.domain.Order;
import org.company.recordshop.domain.OrderExample;
import org.company.recordshop.service.dto.OrderWithOrderLinesDto;
import org.company.recordshop.domain.OrderLine;
import org.company.recordshop.service.dto.OrderLineDto;

import org.company.recordshop.data.OrderLineDao;

/**
 * Translator for translating Order domain objects from- and to OrderWithOrderLinesDto data transfer objects. 
 *
 * @author generated by Mod4j
 */
public class OrderWithOrderLinesDtoTranslator {

	protected OrderLineDtoTranslator orderLineDtoTranslator;

	/**
	 * @param object
	 *            The orderLineDtoTranslator to set.
	 */
	public void setOrderLineDtoTranslator(OrderLineDtoTranslator object) {
		this.orderLineDtoTranslator = object;
	}

	/** 
	 * @return The orderLineDtoTranslator to get.
	 *
	 */
	public OrderLineDtoTranslator getOrderLineDtoTranslator() {
		return this.orderLineDtoTranslator;
	}

	protected OrderLineDao orderLineDao;

	/**
	 * @param object
	 *            The orderLineDao to set.
	 */
	public void setOrderLineDao(OrderLineDao object) {
		this.orderLineDao = object;
	}

	/** 
	 * @return The orderLineDao to get.
	 *
	 */
	public OrderLineDao getOrderLineDao() {
		return this.orderLineDao;
	}

	/**
	
	 * Translates a OrderWithOrderLinesDto dto object into a Order domain object.
	 * A new domain object will be created passed to the {@link #fromDto(OrderWithOrderLinesDto, Order)}.
	.
	 *
	 * @param source The {@link OrderWithOrderLinesDto} object to translate, may not be {@code null}.
	 * @return {@link Order}, the resulting domain object.
	 */
	public Order fromDto(final OrderWithOrderLinesDto source) {
		return fromDto(source, new HashMap<Object, Object>());
	}

	Order fromDto(final OrderWithOrderLinesDto source,
			final Map<Object, Object> translated) {

		Assert.notNull(source, "argument [source] may not be null");
		Assert.isNull(source.getId(),
				"Can not translate a dto with existing id to a new domain object. Dto: "
						+ source);
		Order target = new Order(source.getOrderNumber()

		);
		return fromDto(source, target, translated);

	}

	/**
	 * Translates a OrderWithOrderLinesDto dto object into a Order domain object. All properties in the dto will be mapped to the 
	 * corresponding property in the <code>target</code> domain object. 
	 *
	 * @param source The {@link OrderWithOrderLinesDto} object to translate, may not be {@code null}.
	 * @param target The {@link Order} object translated from source, may not be {@code null}.
	 * @return {@link Order}, the resulting domain object.
	 */
	public Order fromDto(final OrderWithOrderLinesDto source, final Order target) {
		return fromDto(source, target, new HashMap<Object, Object>());
	}

	Order fromDto(final OrderWithOrderLinesDto source, final Order target,
			final Map<Object, Object> translated) {

		if (translated.containsKey((source))) {
			return (Order) translated.get(source);
		}

		Assert.notNull(source, "argument [source] may not be null");
		Assert.notNull(target, "argument [target] may not be null");

		final boolean equals = (source.getId() == null)
				? target.getId() == null
				: source.getId().equals(target.getId());

		if (!equals) {
			throw new IllegalArgumentException(
					"Can not translate a dto to a domain object when the id of the dto differs from the id of the domain object.");
		}

		validateVersion(source, target);

		target.activateValidation(false);

		target.setOrderNumber(source.getOrderNumber());

		translated.put(source, target);

		/*
		 * Synchronize OrderLines association.
		 */
		Set<OrderLine> orderLinesToBeRemoved = new HashSet<OrderLine>();
		/* Avoid changing the collection underneath an active iterator. */
		for (OrderLine element : target.getOrderLines()) {
			if (source.getFromOrderLines(element.getId()) == null) {
				orderLinesToBeRemoved.add(element);
			}
		}
		/* Objects to be removed */
		for (OrderLine element : orderLinesToBeRemoved) {
			target.removeFromOrderLines(element);
		}
		for (OrderLineDto element : source.getOrderLines()) {
			if (element.getId() == null) {
				/* A new object to be added */
				target.addToOrderLines(orderLineDtoTranslator.fromDto(element,
						translated));
			} else {

				/* An existing object to be updated */
				if (target.getFromOrderLines(element.getId()) == null) {
					// Element is not in target yet, read it from the store and add to target
					OrderLine original = orderLineDao.retrieve(element.getId());
					OrderLine updated = orderLineDtoTranslator.fromDto(element,
							original, translated);
					target.addToOrderLines(updated);
				} else {
					// Element is in target already, use this object. No need to add to the collection
					orderLineDtoTranslator.fromDto(element, target
							.getFromOrderLines(element.getId()), translated);
				}
			}
		}

		target.activateValidation(true);

		return target;
	}

	/**
	 * Translates a Order domain object into a OrderWithOrderLinesDto dto object. Properties and associations of the domain object
	 * will be mapped to the corresponding properties and associations in the dto object.
	 * To prevent looping while translating biderectional or circulair associations translated objects will be added to the 'translated' register.    
	 *
	 * @param source The {@link Order} object to translate.
	 *
	 * @return OrderWithOrderLinesDto The {@link OrderWithOrderLinesDto} object translated from source.
	 */
	public OrderWithOrderLinesDto toDto(final Order source) {
		return toDto(source, new HashMap<Object, Object>());
	}

	OrderWithOrderLinesDto toDto(final Order source,
			final Map<Object, Object> translated) {
		if (translated.containsKey((source))) {
			return (OrderWithOrderLinesDto) translated.get(source);
		}
		Assert.notNull(source, "argument [source] may not be null");
		OrderWithOrderLinesDto result = new OrderWithOrderLinesDto(source
				.getId(), source.getVersion());
		result.setOrderNumber(source.getOrderNumber());

		translated.put(source, result);

		for (OrderLine element : source.getOrderLines()) {
			result.addToOrderLines(orderLineDtoTranslator.toDto(element,
					translated));
		}

		return result;
	}

	/**
	 * Translates a OrderWithOrderLinesDto dto object into a OrderExample Example domain object. 
	 * All properties in the dto will be mapped to the corresponding property in the <code>target</code> domain object. 
	 * Association references in the dto will not be translated into the <code>target</code> domain object.
	 *
	 * @param source The {@link OrderWithOrderLinesDto} object to translate.
	 *
	 * @return {@link OrderExample}, the resulting businessclass object.
	 */
	public OrderExample exampleFromDto(final OrderWithOrderLinesDto source) {
		Assert.notNull(source, "argument [source] may not be null");
		OrderExample result = new OrderExample();

		if (source.getOrderNumber() != null) {
			result.setOrderNumber(source.getOrderNumber());
		}

		return result;
	}

	/**
	 * Validate that the version of the DTO and the business object are valid.
	 * The DTO may only have a version if the domain object also has a version.
	 * When they both have a version and the DTO version is less, another user
	 * has updated the domain object in the meantime, if it is equal, all is
	 * well. If it is more, an unexpected situation occurs: the DTOs is more new
	 * then the domain object: this is not possible.
	 * 
	 * @param source
	 *            The DTO.
	 * @param target
	 *            The domain object target.
	 */
	private void validateVersion(final OrderWithOrderLinesDto source,
			final Order target) {
		final Integer sourceVersion = source.getVersion();
		final Integer targetVersion = target.getVersion();

		// FIXME the DTO translator should not know that -1 is the default unpersisted value!
		final boolean equals = (sourceVersion == null)
				? targetVersion == -1
				: sourceVersion.equals(targetVersion);

		if (!equals) {
			throw new ConcurrentUpdateException(
					"Versions of source and target do not match for dto "
							+ source + ", source is " + sourceVersion
							+ ", target is " + targetVersion + ".");
		}
	}
}
