
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:12 CEST 2011
 *     Application model: OrderWithOrderLinesDto
 *     Generator        : Mod4j DataContractDsl generator: dtoBean.xpt
 */

package org.company.recordshop.service.dto;

import java.util.ArrayList;
import java.util.List;

import org.mod4j.runtime.dto.AbstractDto;

/**
 * 
 *
 * @author generated by Mod4j
 */
public class OrderWithOrderLinesDto extends AbstractDto {

	/**
	 *  orderNumber: 
	 */

	private String orderNumber;

	/**
	 *  orderLines: 
	 */

	// ORDERED     
	private List<OrderLineDto> orderLines = new ArrayList<OrderLineDto>();

	/**
	 * Default no-argument constructor.
	 */
	public OrderWithOrderLinesDto() {
		super();
	}

	/**
	 * Constructor for use by the DTO Translator.
	 * 
	 * @param id
	 *            The ID of the referenced business object.
	 * @param version
	 *            The version of the referenced business object.
	 */
	public OrderWithOrderLinesDto(final Long id, final Integer version) {
		super(id, version);
	}

	/**
	 * @param orderNumber (String) 
	 */
	public void setOrderNumber(final String orderNumber) {
		this.orderNumber = orderNumber;
	}

	/**
	 *
	 * @return orderNumber (String) 
	 */
	public String getOrderNumber() {
		return this.orderNumber;
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return orderLineDto (OrderLineDto)
	 *         with the given id.
	 */
	public OrderLineDto getFromOrderLines(Long id) {
		if (id == null) {
			return null;
		}
		for (OrderLineDto orderLineDto : this.orderLines) {
			if (id.equals(orderLineDto.getId())) {
				return orderLineDto;
			}
		}
		return null;
	}

	/** ORDERED
	 * @return orderLines (List<OrderLineDto>) 
	 */
	public List<OrderLineDto> getOrderLines() {
		return this.orderLines;
	}

	/**
	 * Adds a single element to the orderLines collection
	 *
	 * @param element The element to add.
	 */
	public void addToOrderLines(OrderLineDto element) {

		if (element == null || this.orderLines.contains(element)) {
			return;
		}
		this.orderLines.add(element);
	}

	/**
	 * Adds a single element to the orderLines collection at index 
	 *
	 * @param element The element to add.
	 *        index   The index where the element will be added
	 */
	public void addToOrderLines(int index, OrderLineDto element) {

		if (element == null || this.orderLines.contains(element)) {
			return;
		}
		this.orderLines.add(index, element);
	}

	/**
	 * Removes a single element from the orderLines collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFromOrderLines(OrderLineDto element) {

		if (element == null) {
			return;
		}
		this.orderLines.remove(element);
	}

	/** 
	 * Removes a single element from the orderLines collection.
	 * 
	 * @param index The index of the element to be removed.
	 */
	public void removeFromOrderLines(int index) {
		this.orderLines.remove(index);
	}

	/**
	 * Sets all attributes that have a default value, to their default values.
	 *
	 * @author Generated by Mod4j
	 */
	public void clear() {
		orderNumber = null;

	}

	/**
	 * toString method for OrderWithOrderLinesDto
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result
				.append("org.company.recordshop.service.dto.OrderWithOrderLinesDto[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("orderNumber=");
		result.append(orderNumber);

		result.append("]");
		return result.toString();
	}

}
