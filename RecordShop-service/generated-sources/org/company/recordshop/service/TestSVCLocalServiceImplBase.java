
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:15 CEST 2011
 *     Application model: TestSVC
 *     Generator        : Mod4j ServiceDsl generator: LocalServiceImplBase.xpt
 */

package org.company.recordshop.service;

import java.util.List;
import java.util.ArrayList;
import org.springframework.util.Assert;

import org.company.recordshop.business.TestSVCDomainService;

import org.company.recordshop.service.dto.DerivedDto;

import org.company.recordshop.service.dto.translators.DerivedDtoTranslator;
import org.company.recordshop.domain.Derived;
import org.company.recordshop.domain.DerivedExample;

/**
 * @author Generated by Mod4j
 */
abstract public class TestSVCLocalServiceImplBase
		implements
			TestSVCLocalService {

	protected TestSVCDomainService testSVCDomainService;

	/**
	 * @param object
	 *            The testSVCDomainService to set.
	 */
	public void setTestSVCDomainService(TestSVCDomainService object) {
		this.testSVCDomainService = object;
	}

	/** 
	 * @return The testSVCDomainService to get.
	 *
	 */
	public TestSVCDomainService getTestSVCDomainService() {
		return this.testSVCDomainService;
	}

	protected DerivedDtoTranslator derivedDtoTranslator;

	/**
	 * @param object
	 *            The derivedDtoTranslator to set.
	 */
	public void setDerivedDtoTranslator(DerivedDtoTranslator object) {
		this.derivedDtoTranslator = object;
	}

	/** 
	 * @return The derivedDtoTranslator to get.
	 *
	 */
	public DerivedDtoTranslator getDerivedDtoTranslator() {
		return this.derivedDtoTranslator;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<DerivedDto> listAllDerived() {
		List<Derived> all = testSVCDomainService.listAllDeriveds();
		List<DerivedDto> result = new ArrayList<DerivedDto>();

		for (Derived object : all) {
			DerivedDto item = derivedDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<DerivedDto> listAllDerived(final int firstResult,
			final int maxResults) {
		List<Derived> range = testSVCDomainService.listDeriveds(firstResult,
				maxResults);
		List<DerivedDto> result = new ArrayList<DerivedDto>();

		for (Derived object : range) {
			DerivedDto item = derivedDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<DerivedDto> listAllDerived(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		List<Derived> range = testSVCDomainService.listDeriveds(firstResult,
				maxResults, sortProperty, isAscending);
		List<DerivedDto> result = new ArrayList<DerivedDto>();

		for (Derived object : range) {
			DerivedDto item = derivedDtoTranslator.toDto(object);
			result.add(item);
		}
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public Long createDerived(DerivedDto object) {
		Long result = testSVCDomainService.createDerived(derivedDtoTranslator
				.fromDto(object));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public DerivedDto readDerivedAsDerivedDto(Long id) {
		Derived result = testSVCDomainService.readDerived(id);
		return (result == null) ? null : derivedDtoTranslator.toDto(result);
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateDerived(DerivedDto object) {
		Derived domainObject = testSVCDomainService.readDerived(object.getId());
		derivedDtoTranslator.fromDto(object, domainObject);
		testSVCDomainService.updateDerived(domainObject);
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteDerived(DerivedDto object) {
		Assert.notNull(object, "argument [object] may not be null");
		Derived existing = testSVCDomainService.readDerived(object.getId());
		testSVCDomainService.deleteDerived(existing);
	}

	/**
	 * {@inheritDoc}
	 */
	public long countDeriveds() {
		return testSVCDomainService.countDeriveds();
	}

	// Association related service methods

}
