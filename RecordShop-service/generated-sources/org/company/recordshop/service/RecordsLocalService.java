/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:14 CEST 2011
 *     Application model: Records
 *     Generator        : Mod4j ServiceDsl generator: LocalService.xpt
 */

package org.company.recordshop.service;

import java.util.List;

import org.company.recordshop.service.dto.FullRecordDto;

/**
 * @author Generated by Mod4j
 */
public interface RecordsLocalService {

	/**
	 * Returns a list of all objects of type FullRecordDto.
	 * 
	 *
	 * @return the list of all FullRecordDto objects.
	 */
	public List<FullRecordDto> listRecords();

	/**
	 * Reads a range (page) of objects of type FullRecordDto.
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * 
	 * @return List containing 0 or more FullRecordDto objects.
	 *
	 * @see {@link #listRecords(int, int, String, boolean)}
	 */
	public List<FullRecordDto> listRecords(final int firstResult,
			final int maxResults);

	/**
	 * Reads an sorted range (page) of objects of type FullRecordDto.
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 *
	 * @return ordered List containing 0 or more FullRecordDto objects.
	 *
	 * @see {@link #listRecords(int, int)} 
	 */
	public List<FullRecordDto> listRecords(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending);

	/**
	 * Find all objects of type FullRecordDto that conform to the example object.
	 * 
	 * @param example
	 *            The objects to which the result objects need to conform.
	 * @return the list of all FullRecordDto objects conforming to the example object.
	 */
	public List<FullRecordDto> findRecords(FullRecordDto example);

	/**
	 * Reads an sorted range (page) of objects of type FullRecordDto.
	 * 
	 * @param exampleDto the dto-object to which the result objects need to conform
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResults - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 *
	 * @return ordered List containing 0 or more FullRecordDto objects.
	 *
	 * @see {@link #findRecords(int, int, String, boolean)} 
	 */
	public List<FullRecordDto> findRecords(final FullRecordDto exampleDto,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending);

	/**
	 * Counts the number of existing objects of type Record.
	 *
	 * @param exampleDto
	 *            The dto-object to which the result objects must conform.
	 * 
	 * @return number of existing Record objects that matches the exampleDto.
	 */
	public long countRecords(final FullRecordDto exampleDto);

	/**
	 * Creates a new FullRecordDto.
	 * 
	 * @param object 
	 *            The FullRecordDto to create.
	 * @return the id of the FullRecordDto created.
	 */
	public Long createRecord(FullRecordDto object);

	/**
	 * Reads an existing FullRecordDto.
	 * 
	 * @param id
	 *            The id of the FullRecordDto to read.
	 * @return The FullRecordDto with id, or null if no object with id exists.
	 */
	public FullRecordDto readRecordAsFullRecordDto(Long id);

	/**
	 * Updates an existing FullRecordDto.
	 * 
	 * @param object
	 *            The FullRecordDto containing the modifications for the corresponding FullRecordDto
	 */
	public void updateRecord(FullRecordDto object);

	/**
	 * Deletes an existing FullRecordDto.
	 * 
	 * @param object
	 *            The FullRecordDto object to delete.
	 */
	public void deleteRecord(FullRecordDto object);

	/**
	 * Counts the number of existing objects of type Record.
	 * 
	 * @return number of existing Record objects. 
	 */
	public long countRecords();

}
