
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:13 CEST 2011
 *     Application model: CustomerServiceModel
 *     Generator        : Mod4j ServiceDsl generator: BusinessServiceImplBase.xpt
 */

package org.company.recordshop.business;

import java.util.List;
import java.util.ArrayList;
import org.springframework.util.Assert;

import org.company.recordshop.domain.Customer;
import org.company.recordshop.domain.CustomerExample;
import org.company.recordshop.data.CustomerDao;
import org.company.recordshop.domain.Order;
import org.company.recordshop.domain.OrderExample;
import org.company.recordshop.data.OrderDao;
import org.company.recordshop.domain.OrderLine;
import org.company.recordshop.domain.OrderLineExample;
import org.company.recordshop.data.OrderLineDao;
import org.company.recordshop.domain.Product;
import org.company.recordshop.domain.ProductExample;
import org.company.recordshop.data.ProductDao;
import org.company.recordshop.domain.Artist;
import org.company.recordshop.domain.ArtistExample;
import org.company.recordshop.data.ArtistDao;
import org.company.recordshop.domain.Person;
import org.company.recordshop.domain.PersonExample;
import org.company.recordshop.data.PersonDao;
import org.company.recordshop.domain.Relation;
import org.company.recordshop.domain.RelationExample;
import org.company.recordshop.data.RelationDao;

/**
 * @author Generated by Mod4j
 */
abstract public class CustomerServiceModelDomainServiceImplBase
		implements
			CustomerServiceModelDomainServiceBase {

	protected CustomerDao customerDao;

	/**
	 * @param object
	 *            The customerDao to set.
	 */
	public void setCustomerDao(CustomerDao object) {
		this.customerDao = object;
	}

	/** 
	 * @return The customerDao to get.
	 *
	 */
	public CustomerDao getCustomerDao() {
		return this.customerDao;
	}

	protected OrderDao orderDao;

	/**
	 * @param object
	 *            The orderDao to set.
	 */
	public void setOrderDao(OrderDao object) {
		this.orderDao = object;
	}

	/** 
	 * @return The orderDao to get.
	 *
	 */
	public OrderDao getOrderDao() {
		return this.orderDao;
	}

	protected OrderLineDao orderLineDao;

	/**
	 * @param object
	 *            The orderLineDao to set.
	 */
	public void setOrderLineDao(OrderLineDao object) {
		this.orderLineDao = object;
	}

	/** 
	 * @return The orderLineDao to get.
	 *
	 */
	public OrderLineDao getOrderLineDao() {
		return this.orderLineDao;
	}

	protected ProductDao productDao;

	/**
	 * @param object
	 *            The productDao to set.
	 */
	public void setProductDao(ProductDao object) {
		this.productDao = object;
	}

	/** 
	 * @return The productDao to get.
	 *
	 */
	public ProductDao getProductDao() {
		return this.productDao;
	}

	protected ArtistDao artistDao;

	/**
	 * @param object
	 *            The artistDao to set.
	 */
	public void setArtistDao(ArtistDao object) {
		this.artistDao = object;
	}

	/** 
	 * @return The artistDao to get.
	 *
	 */
	public ArtistDao getArtistDao() {
		return this.artistDao;
	}

	protected PersonDao personDao;

	/**
	 * @param object
	 *            The personDao to set.
	 */
	public void setPersonDao(PersonDao object) {
		this.personDao = object;
	}

	/** 
	 * @return The personDao to get.
	 *
	 */
	public PersonDao getPersonDao() {
		return this.personDao;
	}

	protected RelationDao relationDao;

	/**
	 * @param object
	 *            The relationDao to set.
	 */
	public void setRelationDao(RelationDao object) {
		this.relationDao = object;
	}

	/** 
	 * @return The relationDao to get.
	 *
	 */
	public RelationDao getRelationDao() {
		return this.relationDao;
	}

	/**
	 * {@inheritDoc} 
	 */
	public Long createCustomer(Customer object) {
		Assert.notNull(object, "argument [object] may not be null");
		return customerDao.add(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Long createRelation(Relation object) {
		Assert.notNull(object, "argument [object] may not be null");
		return relationDao.add(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Long createPerson(Person object) {
		Assert.notNull(object, "argument [object] may not be null");
		return personDao.add(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Long createProduct(Product object) {
		Assert.notNull(object, "argument [object] may not be null");
		return productDao.add(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Long createArtist(Artist object) {
		Assert.notNull(object, "argument [object] may not be null");
		return artistDao.add(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Order readOrder(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return orderDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public OrderLine readOrderLine(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return orderLineDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Customer readCustomer(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return customerDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Relation readRelation(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return relationDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Person readPerson(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return personDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Product readProduct(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return productDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public Artist readArtist(Long id) {
		Assert.notNull(id, "argument [id] may not be null");
		return artistDao.retrieve(id);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void updateCustomer(Customer object) {
		Assert.notNull(object, "argument [object] may not be null");
	}

	/**
	 * {@inheritDoc} 
	 */
	public void updateRelation(Relation object) {
		Assert.notNull(object, "argument [object] may not be null");
	}

	/**
	 * {@inheritDoc} 
	 */
	public void updatePerson(Person object) {
		Assert.notNull(object, "argument [object] may not be null");
	}

	/**
	 * {@inheritDoc} 
	 */
	public void updateProduct(Product object) {
		Assert.notNull(object, "argument [object] may not be null");
	}

	/**
	 * {@inheritDoc} 
	 */
	public void updateArtist(Artist object) {
		Assert.notNull(object, "argument [object] may not be null");
	}

	/**
	 * {@inheritDoc} 
	 */
	public void deleteCustomer(Customer object) {
		Assert.notNull(object, "argument [object] may not be null");
		customerDao.delete(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void deleteRelation(Relation object) {
		Assert.notNull(object, "argument [object] may not be null");
		relationDao.delete(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void deletePerson(Person object) {
		Assert.notNull(object, "argument [object] may not be null");
		personDao.delete(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void deleteProduct(Product object) {
		Assert.notNull(object, "argument [object] may not be null");
		productDao.delete(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void deleteArtist(Artist object) {
		Assert.notNull(object, "argument [object] may not be null");
		artistDao.delete(object);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Customer> listAllCustomers() {
		return customerDao.listAll();
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Customer> listCustomers(final int firstResult,
			final int maxResults) {
		return customerDao.listPage(firstResult, maxResults);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Customer> listCustomers(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		return customerDao.listPage(firstResult, maxResults, sortProperty,
				isAscending);
	}

	/**
	 * {@inheritDoc} 
	 */
	public long countCustomers() {
		return customerDao.count();
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Artist> listAllArtists() {
		return artistDao.listAll();
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Artist> listArtists(final int firstResult, final int maxResults) {
		return artistDao.listPage(firstResult, maxResults);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Artist> listArtists(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		return artistDao.listPage(firstResult, maxResults, sortProperty,
				isAscending);
	}

	/**
	 * {@inheritDoc} 
	 */
	public long countArtists() {
		return artistDao.count();
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Person> findPersonByExample(PersonExample example) {
		Assert.notNull(example, "argument [example] may not be null");
		return this.personDao.findByExample(example);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Person> findPersonByExampleCount(final PersonExample example,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending) {
		return personDao.listPageByExample(example, firstResult, maxResults,
				sortProperty, isAscending);
	}

	/**
	 * {@inheritDoc} 
	 */
	public long countPersons(PersonExample example) {
		return personDao.count(example);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Customer> findCustomerByExample(CustomerExample example) {
		Assert.notNull(example, "argument [example] may not be null");
		return this.customerDao.findByExample(example);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Customer> findCustomerByExampleCount(
			final CustomerExample example, final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending) {
		return customerDao.listPageByExample(example, firstResult, maxResults,
				sortProperty, isAscending);
	}

	/**
	 * {@inheritDoc} 
	 */
	public long countCustomers(CustomerExample example) {
		return customerDao.count(example);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void addToOrderLines(Order whole, OrderLine part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		whole.addToOrderLines(part);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void addToOrderLines(Order whole, int index, OrderLine part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		whole.addToOrderLines(index, part);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void removeFromOrderLines(Order whole, OrderLine part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		whole.removeFromOrderLines(part);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void removeFromOrderLines(Order whole, int index) {
		Assert.notNull(whole, "argument [whole] may not be null");
		whole.removeFromOrderLines(index);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void addToOrders(Customer whole, Order part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		whole.addToOrders(part);
	}

	/**
	 * {@inheritDoc} 
	 */
	public void removeFromOrders(Customer whole, Order part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		Assert.notNull(part, "argument [part] may not be null");
		whole.removeFromOrders(part);
	}

	/**
	 * {@inheritDoc} 
	 */
	public List<Order> getOrders(Customer source) {
		Assert.notNull(source, "argument [source] may not be null");
		return new ArrayList<Order>(source.getOrders());
	}

	/**
	 * {@inheritDoc} 
	 */
	public Customer getCustomer(Order source) {
		Assert.notNull(source, "argument [source] may not be null");
		return source.getCustomer();
	}

	/**
	 * {@inheritDoc} 
	 */
	public void setCustomer(Order whole, Customer part) {
		Assert.notNull(whole, "argument [whole] may not be null");
		whole.setCustomer(part);
	}

}
