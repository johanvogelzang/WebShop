
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:14 CEST 2011
 *     Application model: Records
 *     Generator        : Mod4j ServiceDsl generator: BusinessServiceBase.xpt
 */

package org.company.recordshop.business;

import java.util.List;

import org.company.recordshop.domain.Record;
import org.company.recordshop.domain.RecordExample;

/**
 * @author Generated by Mod4j
 */
public interface RecordsDomainServiceBase {

	/**
	 * Create a new Record.
	 * 
	 * @param object
	 *            the Record to create.
	 * @return the id of the object created.
	 */
	public Long createRecord(Record object);

	/**
	 * Read an existing Record.
	 * 
	 * @param id
	 *            the id of the Record to read.
	 * @return Record
	 */
	public Record readRecord(Long id);

	/**
	 * Update an existing Record.
	 * 
	 * @param object
	 *            the representation of the modified Record.
	 */
	public void updateRecord(Record object);

	/**
	 * Delete an Record
	 * 
	 * @param object
	 *            the Record object to delete.
	 */
	public void deleteRecord(Record object);

	/**
	 * Read all existing Record.
	 *  
	 * @return List<Record>
	 */
	public List<Record> listAllRecords();

	/**
	 * Reads a range (page) of existing Records.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * 
	 * @return List containing 0 or more existing Record objects.
	 *
	 * @see {@link #listRecords(int, int, String, boolean)} 
	 */
	public List<Record> listRecords(final int firstResult, final int maxResults);

	/**
	 * Reads a sorted range (page) of existing Records.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Record objects.
	 *
	 * @see {@link #listRecords(int, int, String, boolean)}
	 */
	public List<Record> listRecords(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending);

	/**
	 * Counts all existing Records objects.
	 *  
	 *
	 * @return number of existing Records objects.
	 */
	public long countRecords();

	/**
	 * Find all Record obejcts that look like the example object.
	 * 
	 * @param example
	 *            The object to which the result objects must conform.
	 * @return List<Record>
	 */
	public List<Record> findRecordByExample(final RecordExample example);

	/**
	 * Reads a sorted range (page) of existing Records.
	 *  
	 * 
	 * @param example - the example object to which the result objects need to conform
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Record objects.
	 *
	 * @see {@link #listRecords(int, int, String, boolean)}
	 */
	public List<Record> findRecordByExampleCount(final RecordExample example,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending);

	/**
	 * Counts the number of persisted Record objects in the database that
	 * matches the given example object.
	 * 
	 *
	 * @param example
	 *                the example object to be counted
	 * 
	 * @return the number of persisted objects in the database.
	 */
	public long countRecords(final RecordExample example);

}
