
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:13 CEST 2011
 *     Application model: CustomerServiceModel
 *     Generator        : Mod4j ServiceDsl generator: BusinessServiceBase.xpt
 */

package org.company.recordshop.business;

import java.util.List;

import org.company.recordshop.domain.Customer;
import org.company.recordshop.domain.CustomerExample;
import org.company.recordshop.domain.Order;
import org.company.recordshop.domain.OrderExample;
import org.company.recordshop.domain.OrderLine;
import org.company.recordshop.domain.OrderLineExample;
import org.company.recordshop.domain.Product;
import org.company.recordshop.domain.ProductExample;
import org.company.recordshop.domain.Artist;
import org.company.recordshop.domain.ArtistExample;
import org.company.recordshop.domain.Person;
import org.company.recordshop.domain.PersonExample;
import org.company.recordshop.domain.Relation;
import org.company.recordshop.domain.RelationExample;

/**
 * @author Generated by Mod4j
 */
public interface CustomerServiceModelDomainServiceBase {

	/**
	 * Create a new Customer.
	 * 
	 * @param object
	 *            the Customer to create.
	 * @return the id of the object created.
	 */
	public Long createCustomer(Customer object);

	/**
	 * Create a new Relation.
	 * 
	 * @param object
	 *            the Relation to create.
	 * @return the id of the object created.
	 */
	public Long createRelation(Relation object);

	/**
	 * Create a new Person.
	 * 
	 * @param object
	 *            the Person to create.
	 * @return the id of the object created.
	 */
	public Long createPerson(Person object);

	/**
	 * Create a new Product.
	 * 
	 * @param object
	 *            the Product to create.
	 * @return the id of the object created.
	 */
	public Long createProduct(Product object);

	/**
	 * Create a new Artist.
	 * 
	 * @param object
	 *            the Artist to create.
	 * @return the id of the object created.
	 */
	public Long createArtist(Artist object);

	/**
	 * Read an existing Order.
	 * 
	 * @param id
	 *            the id of the Order to read.
	 * @return Order
	 */
	public Order readOrder(Long id);

	/**
	 * Read an existing OrderLine.
	 * 
	 * @param id
	 *            the id of the OrderLine to read.
	 * @return OrderLine
	 */
	public OrderLine readOrderLine(Long id);

	/**
	 * Read an existing Customer.
	 * 
	 * @param id
	 *            the id of the Customer to read.
	 * @return Customer
	 */
	public Customer readCustomer(Long id);

	/**
	 * Read an existing Relation.
	 * 
	 * @param id
	 *            the id of the Relation to read.
	 * @return Relation
	 */
	public Relation readRelation(Long id);

	/**
	 * Read an existing Person.
	 * 
	 * @param id
	 *            the id of the Person to read.
	 * @return Person
	 */
	public Person readPerson(Long id);

	/**
	 * Read an existing Product.
	 * 
	 * @param id
	 *            the id of the Product to read.
	 * @return Product
	 */
	public Product readProduct(Long id);

	/**
	 * Read an existing Artist.
	 * 
	 * @param id
	 *            the id of the Artist to read.
	 * @return Artist
	 */
	public Artist readArtist(Long id);

	/**
	 * Update an existing Customer.
	 * 
	 * @param object
	 *            the representation of the modified Customer.
	 */
	public void updateCustomer(Customer object);

	/**
	 * Update an existing Relation.
	 * 
	 * @param object
	 *            the representation of the modified Relation.
	 */
	public void updateRelation(Relation object);

	/**
	 * Update an existing Person.
	 * 
	 * @param object
	 *            the representation of the modified Person.
	 */
	public void updatePerson(Person object);

	/**
	 * Update an existing Product.
	 * 
	 * @param object
	 *            the representation of the modified Product.
	 */
	public void updateProduct(Product object);

	/**
	 * Update an existing Artist.
	 * 
	 * @param object
	 *            the representation of the modified Artist.
	 */
	public void updateArtist(Artist object);

	/**
	 * Delete an Customer
	 * 
	 * @param object
	 *            the Customer object to delete.
	 */
	public void deleteCustomer(Customer object);

	/**
	 * Delete an Relation
	 * 
	 * @param object
	 *            the Relation object to delete.
	 */
	public void deleteRelation(Relation object);

	/**
	 * Delete an Person
	 * 
	 * @param object
	 *            the Person object to delete.
	 */
	public void deletePerson(Person object);

	/**
	 * Delete an Product
	 * 
	 * @param object
	 *            the Product object to delete.
	 */
	public void deleteProduct(Product object);

	/**
	 * Delete an Artist
	 * 
	 * @param object
	 *            the Artist object to delete.
	 */
	public void deleteArtist(Artist object);

	/**
	 * Read all existing Customer.
	 *  
	 * @return List<Customer>
	 */
	public List<Customer> listAllCustomers();

	/**
	 * Reads a range (page) of existing Customers.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * 
	 * @return List containing 0 or more existing Customer objects.
	 *
	 * @see {@link #listCustomers(int, int, String, boolean)} 
	 */
	public List<Customer> listCustomers(final int firstResult,
			final int maxResults);

	/**
	 * Reads a sorted range (page) of existing Customers.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Customer objects.
	 *
	 * @see {@link #listCustomers(int, int, String, boolean)}
	 */
	public List<Customer> listCustomers(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending);

	/**
	 * Counts all existing Customers objects.
	 *  
	 *
	 * @return number of existing Customers objects.
	 */
	public long countCustomers();

	/**
	 * Read all existing Artist.
	 *  
	 * @return List<Artist>
	 */
	public List<Artist> listAllArtists();

	/**
	 * Reads a range (page) of existing Artists.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * 
	 * @return List containing 0 or more existing Artist objects.
	 *
	 * @see {@link #listArtists(int, int, String, boolean)} 
	 */
	public List<Artist> listArtists(final int firstResult, final int maxResults);

	/**
	 * Reads a sorted range (page) of existing Artists.
	 *  
	 * 
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Artist objects.
	 *
	 * @see {@link #listArtists(int, int, String, boolean)}
	 */
	public List<Artist> listArtists(final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending);

	/**
	 * Counts all existing Artists objects.
	 *  
	 *
	 * @return number of existing Artists objects.
	 */
	public long countArtists();

	/**
	 * Find all Person obejcts that look like the example object.
	 * 
	 * @param example
	 *            The object to which the result objects must conform.
	 * @return List<Person>
	 */
	public List<Person> findPersonByExample(final PersonExample example);

	/**
	 * Reads a sorted range (page) of existing Persons.
	 *  
	 * 
	 * @param example - the example object to which the result objects need to conform
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Person objects.
	 *
	 * @see {@link #listPersons(int, int, String, boolean)}
	 */
	public List<Person> findPersonByExampleCount(final PersonExample example,
			final int firstResult, final int maxResults,
			final String sortProperty, final boolean isAscending);

	/**
	 * Counts the number of persisted Person objects in the database that
	 * matches the given example object.
	 * 
	 *
	 * @param example
	 *                the example object to be counted
	 * 
	 * @return the number of persisted objects in the database.
	 */
	public long countPersons(final PersonExample example);

	/**
	 * Find all Customer obejcts that look like the example object.
	 * 
	 * @param example
	 *            The object to which the result objects must conform.
	 * @return List<Customer>
	 */
	public List<Customer> findCustomerByExample(final CustomerExample example);

	/**
	 * Reads a sorted range (page) of existing Customers.
	 *  
	 * 
	 * @param example - the example object to which the result objects need to conform
	 * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
	 * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
	 * @param sortProperty - the property of the object to sort on
	 * @param isAscending - should the retruned list be sorted ascending or descending? 
	 * 
	 * @return List containing 0 or more existing Customer objects.
	 *
	 * @see {@link #listCustomers(int, int, String, boolean)}
	 */
	public List<Customer> findCustomerByExampleCount(
			final CustomerExample example, final int firstResult,
			final int maxResults, final String sortProperty,
			final boolean isAscending);

	/**
	 * Counts the number of persisted Customer objects in the database that
	 * matches the given example object.
	 * 
	 *
	 * @param example
	 *                the example object to be counted
	 * 
	 * @return the number of persisted objects in the database.
	 */
	public long countCustomers(final CustomerExample example);

	/**
	 * Add a OrderLine to an Order object.
	 * 
	 * @param whole
	 *            The object to which to add.
	 * @param part
	 *            The object that is added to the whole.
	 */
	public void addToOrderLines(Order whole, OrderLine part);

	/**
	 * Add a OrderLine to an Order object at a specific index.
	 * 
	 * @param whole
	 *            The object to which to add.
	 * @param index
	 *            The location where the part should be added.
	 * @param part
	 *            The object that is added to the whole.
	 */
	public void addToOrderLines(Order whole, int index, OrderLine part);

	/**
	 * Remove an OrderLine from an Order
	 * 
	 * @param whole
	 *            The object from which to remove.
	 * @param part
	 *            The object that is removed from the whole.
	 */
	public void removeFromOrderLines(Order whole, OrderLine part);

	/**
	 * Remove an OrderLine from an Order
	 * 
	 * @param whole
	 *            The object from which to remove.
	 * @param index
	 *            The location of the object to be removed.
	 */
	public void removeFromOrderLines(Order whole, int index);

	/**
	 * Add a Order to an Customer object.
	 * 
	 * @param whole
	 *            The object to which to add.
	 * @param part
	 *            The object that is added to the whole.
	 */
	public void addToOrders(Customer whole, Order part);

	/**
	 * Remove an Order from an Customer
	 * 
	 * @param whole
	 *            The object from which to remove.
	 * @param part
	 *            The object that is removed from the whole.
	 */
	public void removeFromOrders(Customer whole, Order part);

	/**
	 * Get the Order from Customer
	 * 
	 * @param source
	 *            The object from which to get the Order
	 * @return List<Order>
	 */
	public List<Order> getOrders(Customer source);

	/**
	 * Get the Customer from an Order
	 * 
	 * @param source
	 *            The object from which to get the Customer
	 * @return Customer
	 */
	public Customer getCustomer(Order source);

	/**
	 * Add a Customer to an Order object.
	 * 
	 * @param whole
	 *            The object to which to add.
	 * @param part
	 *            The object that is added to the whole.
	 */
	public void setCustomer(Order whole, Customer part);

}
