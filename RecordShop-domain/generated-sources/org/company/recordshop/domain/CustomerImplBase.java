
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:08 CEST 2011
 *     Application model: Customer
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.recordshop.domain;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.company.recordshop.domain.businessrules.AnotherRule;
import org.company.recordshop.domain.businessrules.OneEarDiscount;
import org.joda.time.DateTime;
import org.mod4j.runtime.validation.MaxLengthValidator;
import org.mod4j.runtime.validation.MaxValueValidator;
import org.mod4j.runtime.validation.MinLengthValidator;
import org.mod4j.runtime.validation.MinValueValidator;
import org.mod4j.runtime.validation.NotNullValidator;
import org.mod4j.runtime.validation.RegExpValidator;

/**
 * A Customer represents a Person who orders from the RecordShop.
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class CustomerImplBase extends Person
		implements
			java.io.Serializable {

	/**
	 * toString method for CustomerImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.domain.Customer[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("firstName=");
		result.append(firstName);

		result.append(",");
		result.append("lastName=");
		result.append(lastName);

		result.append(",");
		result.append("birthDate=");
		result.append(birthDate);

		result.append(",");
		result.append("numberOfEars=");
		result.append(numberOfEars);

		result.append(",");
		result.append("sexe=");
		result.append(sexe);

		result.append(",");
		result.append("customerNr=");
		result.append(customerNr);

		result.append(",");
		result.append("username=");
		result.append(username);

		result.append(",");
		result.append("emailAddress=");
		result.append(emailAddress);

		result.append(",");
		result.append("blackListed=");
		result.append(blackListed);

		result.append(",");
		result.append("discountPercentage=");
		result.append(discountPercentage);

		result.append("]");
		return result.toString();
	}

	/**
	 *  customerNr: 
	 */
	protected Integer customerNr;

	/**
	 *  username: 
	 */
	protected String username;

	public static final Integer USERNAME_MINLENGTH = 3;

	public static final Integer USERNAME_MAXLENGTH = 10;

	/**
	 *  emailAddress: 
	 */
	protected String emailAddress;

	public static final String EMAILADDRESS_REGEXP = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$";

	/**
	 *  blackListed: 
	 */
	protected Boolean blackListed = false;

	/**
	 *  discountPercentage: 
	 */
	protected Integer discountPercentage = 0;

	public static final Integer DISCOUNTPERCENTAGE_MINVALUE = 0;

	public static final Integer DISCOUNTPERCENTAGE_MAXVALUE = 100;

	/**
	 *  invoiceAddress: Many to One unidirectional: Customers have one invoiceAddress
	 */
	private Address invoiceAddress;

	/**
	 * @return invoiceAddress (<Address>) 
	 */
	public Address getInvoiceAddress() {
		return this.invoiceAddress;
	}

	/**
	 * Implements adding single element to a collection
	 */
	public void setInvoiceAddress(Address element) {
		if (this.invoiceAddress != element) {

			this.invoiceAddress = element;

			validation.validate();
		}
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalSetInvoiceAddress(Address element) {
		this.invoiceAddress = element;
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveInvoiceAddress(Address element) {
		this.invoiceAddress = null;
	}

	/**
	 *  idols: 
	 */
	private Set<Artist> idols = new HashSet<Artist>();

	/**
	 * @return idols (Set<Artist>).
	 */
	public Set<Artist> getIdols() {
		return Collections.unmodifiableSet(this.idols);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return idols (Set<Artist>)
	 * @return idols (Set<Artist>)
	 *         with the given id.
	 */
	public Artist getFromIdols(Long id) {
		if (id == null) {
			return null;
		}
		for (Artist artist : this.idols) {
			if (id.equals(artist.getId())) {
				return artist;
			}
		}
		return null;
	}

	/**
	 * Implements adding single element to a collection.
	 */
	public boolean addToIdols(Artist element) {
		if (element == null) {
			return false;
		}
		if (!idols.contains(element)) {
			idols.add(element);
			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 * Implements removing a single element from a collection.
	 */
	public boolean removeFromIdols(Artist element) {
		if (element == null) {
			return false;
		}
		if (idols.contains(element)) {
			this.idols.remove(element);
			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 *  orders: One 2 Many bidirectional: A customer has a number of orders.
	 */
	private Set<Order> orders = new HashSet<Order>();

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return orders (Order)
	 *         with the given id.
	 */
	public Order getFromOrders(Long id) {
		if (id == null) {
			return null;
		}
		for (Order order : this.orders) {
			if (id.equals(order.getId())) {
				return order;
			}
		}
		return null;
	}
	/**
	 * @return orders (Set<Order>) 
	 */
	public Set<Order> getOrders() {
		return Collections.unmodifiableSet(this.orders);
	}

	/**
	 * Implements adding single element to a collection
	 */
	public boolean addToOrders(Order element) {
		if (element == null) {
			return false;
		}
		if (this.orders.contains(element)) {
			return false;
		}
		this.orders.add(element);

		if (element.getCustomer() != null) {
			element.getCustomer().z_internalRemoveFromorders(element);
		}
		element.z_internalAddTocustomer((Customer) ((Customer) this));

		validation.validate();
		return true;
	}

	/**
	 * Implements removal of a single element from feature 
	 * 
	 * @param element 
	 */
	public boolean removeFromOrders(Order element) {
		if (element == null) {
			return false;
		}
		if (this.orders.remove(element)) {
			element.z_internalRemoveFromcustomer((Customer) ((Customer) this));

			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 * This operation should NOT be used by clients.  It implements the correct
	 * addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToorders(Order element) {
		this.orders.add(element);
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct
	 * removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromorders(Order element) {
		this.orders.remove(element);
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(Customer.class,
				"customerNr"));

		validation.addValidator(new MinLengthValidator(Customer.class,
				"username", USERNAME_MINLENGTH));
		validation.addValidator(new MaxLengthValidator(Customer.class,
				"username", USERNAME_MAXLENGTH));

		validation.addValidator(new RegExpValidator(Customer.class,
				"emailAddress", EMAILADDRESS_REGEXP));

		validation.addValidator(new NotNullValidator(Customer.class,
				"discountPercentage"));
		validation.addValidator(new MinValueValidator(Customer.class,
				"discountPercentage", DISCOUNTPERCENTAGE_MINVALUE));
		validation.addValidator(new MaxValueValidator(Customer.class,
				"discountPercentage", DISCOUNTPERCENTAGE_MAXVALUE));
		validation.addValidator(new OneEarDiscount());
		validation.addValidator(new AnotherRule());

	}

	/**
	 * Default no-argument constructor for CustomerImplBase 
	 */
	protected CustomerImplBase() {
		super();
		addValidators();
	}

	/**
	 * Minimal constructor for CustomerImplBase
	 *
	 * @param firstName (String) First name of the person.
	 * @param lastName (String) Last name of the person.
	 * @param birthDate (DateTime) 
	 * @param customerNr (Integer) 
	 */
	public CustomerImplBase(String firstName, String lastName,
			DateTime birthDate, Integer customerNr) {
		super(firstName, lastName, birthDate);

		this.customerNr = customerNr;
		addValidators();
		validation.validate();
	}

	/**
	 * @return customerNr (Integer) 
	 */
	public Integer getCustomerNr() {
		return this.customerNr;
	}

	/**
	 * @return username (String) 
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * @return emailAddress (String) 
	 */
	public String getEmailAddress() {
		return this.emailAddress;
	}

	/**
	 * @return blackListed (Boolean) 
	 */
	public Boolean isBlackListed() {
		return this.blackListed;
	}

	/**
	 * Extra getter for Boolean properties, because the "is<property>()" syntax does not
	 * always work.
	 *
	 * @return blackListed (Boolean) 
	 */
	public Boolean getBlackListed() {
		return isBlackListed();
	}

	/**
	 * @return discountPercentage (Integer) 
	 */
	public Integer getDiscountPercentage() {
		return this.discountPercentage;
	}

	/**
	 * @param customerNr (Integer) 
	 */
	public void setCustomerNr(final Integer customerNr) {
		this.customerNr = customerNr;
		validation.validate();
	}

	/**
	 * @param username (String) 
	 */
	public void setUsername(final String username) {
		this.username = username;
		validation.validate();
	}

	/**
	 * @param emailAddress (String) 
	 */
	public void setEmailAddress(final String emailAddress) {
		this.emailAddress = emailAddress;
		validation.validate();
	}

	/**
	 * @param blackListed (Boolean) 
	 */
	public void setBlackListed(final Boolean blackListed) {
		this.blackListed = blackListed;
		validation.validate();
	}

	/**
	 * @param discountPercentage (Integer) 
	 */
	public void setDiscountPercentage(final Integer discountPercentage) {
		this.discountPercentage = discountPercentage;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
