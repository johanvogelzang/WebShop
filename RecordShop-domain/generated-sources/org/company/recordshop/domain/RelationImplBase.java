
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:08 CEST 2011
 *     Application model: Relation
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.recordshop.domain;

import org.joda.time.DateTime;
import org.mod4j.runtime.validation.BusinessRuleValidationSupport;
import org.mod4j.runtime.validation.NotNullValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class RelationImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for RelationImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.domain.Relation[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("name=");
		result.append(name);

		result.append(",");
		result.append("since=");
		result.append(since);

		result.append(",");
		result.append("ended=");
		result.append(ended);

		result.append("]");
		return result.toString();
	}

	/**
	 *  name: 
	 */
	protected String name;

	/**
	 *  since: 
	 */
	protected DateTime since;

	/**
	 *  ended: 
	 */
	protected DateTime ended;

	private Person personTo;

	/**
	 * Implements the getter of association end 
	 * 
	 * @param element 
	 */
	public Person getPersonTo() {
		return this.personTo;
	}

	/**
	 * Implements the setter of association end 
	 * 
	 * @param element 
	 */
	public void setPersonTo(Person element) {
		if (this.personTo != element) {
			if (this.personTo != null) {
				this.personTo
						.z_internalRemoveFromrelationsTo((Relation) ((Relation) this));
			}
			this.personTo = element;
			if (element != null) {
				element
						.z_internalAddTorelationsTo((Relation) ((Relation) this));
			}
		}
		validation.validate();
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link
	 * for + owner when a single element is added to it.
	 * 
	 * @param element 
	 */
	public void z_internalAddTopersonTo(Person element) {
		this.personTo = element;
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link for + owner  
	 *                  when a single element is removed to it.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFrompersonTo(Person element) {
		this.personTo = null;
	}

	private Person personFrom;

	/**
	 * Implements the getter of association end 
	 * 
	 * @param element 
	 */
	public Person getPersonFrom() {
		return this.personFrom;
	}

	/**
	 * Implements the setter of association end 
	 * 
	 * @param element 
	 */
	public void setPersonFrom(Person element) {
		if (this.personFrom != element) {
			if (this.personFrom != null) {
				this.personFrom
						.z_internalRemoveFromrelationsFrom((Relation) ((Relation) this));
			}
			this.personFrom = element;
			if (element != null) {
				element
						.z_internalAddTorelationsFrom((Relation) ((Relation) this));
			}
		}
		validation.validate();
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link
	 * for + owner when a single element is added to it.
	 * 
	 * @param element 
	 */
	public void z_internalAddTopersonFrom(Person element) {
		this.personFrom = element;
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link for + owner  
	 *                  when a single element is removed to it.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFrompersonFrom(Person element) {
		this.personFrom = null;
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(Relation.class, "name"));

	}

	/**
	 * Default no-argument constructor for RelationImplBase 
	 */
	protected RelationImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for RelationImplBase
	 *
	 * @param name (String) 
	 */
	public RelationImplBase(String name) {

		this.name = name;
		addValidators();
		validation.validate();
	}

	/**
	 * @return name (String) 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @return since (DateTime) 
	 */
	public DateTime getSince() {
		return this.since;
	}

	/**
	 * @return ended (DateTime) 
	 */
	public DateTime getEnded() {
		return this.ended;
	}

	/**
	 * @param name (String) 
	 */
	public void setName(final String name) {
		this.name = name;
		validation.validate();
	}

	/**
	 * @param since (DateTime) 
	 */
	public void setSince(final DateTime since) {
		this.since = since;
		validation.validate();
	}

	/**
	 * @param ended (DateTime) 
	 */
	public void setEnded(final DateTime ended) {
		this.ended = ended;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
