
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:08 CEST 2011
 *     Application model: OrderLine
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.recordshop.domain;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;

import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import org.mod4j.runtime.validation.MinValueValidator;
import org.mod4j.runtime.validation.MaxValueValidator;
import org.mod4j.runtime.validation.MinLengthValidator;
import org.mod4j.runtime.validation.MaxLengthValidator;
import org.mod4j.runtime.validation.NotNullValidator;
import org.mod4j.runtime.validation.RegExpValidator;

import org.company.recordshop.domain.businessrules.CheckProductMinimumQuantity;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class OrderLineImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for OrderLineImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.domain.OrderLine[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("lineNumber=");
		result.append(lineNumber);

		result.append(",");
		result.append("quantity=");
		result.append(quantity);

		result.append(",");
		result.append("description=");
		result.append(description);

		result.append("]");
		return result.toString();
	}

	/**
	 *  lineNumber: 
	 */
	protected Integer lineNumber;

	public static final Integer LINENUMBER_MINVALUE = 1;

	public static final Integer LINENUMBER_MAXVALUE = 50;

	/**
	 *  quantity: 
	 */
	protected Integer quantity = 1;

	/**
	 *  description: 
	 */
	protected String description;

	/**
	 *  product: One 2 One bidirectional: An orderLine contains a product.
	 */
	private Product product;

	/**
	 * @return product (Product) 
	 */
	public Product getProduct() {
		return this.product;
	}

	/**
	 * Set product
	 */
	public void setProduct(Product element) {
		if (this.product != element) { // prevent infinite loop

			if (this.product != null) { // there is a previous link X
				this.product.z_internalRemoveorderLine((OrderLine) this);
			}

			this.product = element; // set the field to the new value

			if (element != null) {
				// make the new link aware of this 
				element.setOrderLine((OrderLine) this);
			}

			validation.validate();
		}
	}

	/**
	 * This operation should NOT be used by clients.
	 * It implements the correct setting of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalSetproduct(Product element) {
		this.product = null;
	}

	/**
	 * This operation should NOT be used by clients.
	 * It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveproduct(Product element) {
		this.product = null;
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(OrderLine.class,
				"lineNumber"));
		validation.addValidator(new MinValueValidator(OrderLine.class,
				"lineNumber", LINENUMBER_MINVALUE));
		validation.addValidator(new MaxValueValidator(OrderLine.class,
				"lineNumber", LINENUMBER_MAXVALUE));

		validation.addValidator(new NotNullValidator(OrderLine.class,
				"quantity"));

		validation.addValidator(new NotNullValidator(OrderLine.class,
				"description"));
		validation.addValidator(new CheckProductMinimumQuantity());

	}

	/**
	 * Default no-argument constructor for OrderLineImplBase 
	 */
	protected OrderLineImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for OrderLineImplBase
	 *
	 * @param lineNumber (Integer) 
	 * @param description (String) 
	 */
	public OrderLineImplBase(Integer lineNumber, String description) {

		this.lineNumber = lineNumber;
		this.description = description;
		addValidators();
		validation.validate();
	}

	/**
	 * @return lineNumber (Integer) 
	 */
	public Integer getLineNumber() {
		return this.lineNumber;
	}

	/**
	 * @return quantity (Integer) 
	 */
	public Integer getQuantity() {
		return this.quantity;
	}

	/**
	 * @return description (String) 
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * @param lineNumber (Integer) 
	 */
	public void setLineNumber(final Integer lineNumber) {
		this.lineNumber = lineNumber;
		validation.validate();
	}

	/**
	 * @param quantity (Integer) 
	 */
	public void setQuantity(final Integer quantity) {
		this.quantity = quantity;
		validation.validate();
	}

	/**
	 * @param description (String) 
	 */
	public void setDescription(final String description) {
		this.description = description;
		validation.validate();
	}

	/**
	 * @return lineAmount (Float) 
	 */
	abstract public Float getLineAmount();

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
