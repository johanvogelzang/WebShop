
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:11 CEST 2011
 *     Application model: One2ManyOrderedTo
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.recordshop.domain;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;
import org.mod4j.runtime.validation.NotNullValidator;

/**
 * This class has no meaning in the recordshop application. Its purpose is to test
ordered one-to-many associations
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class One2ManyOrderedToImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for One2ManyOrderedToImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.domain.One2ManyOrderedTo[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("property=");
		result.append(property);

		result.append("]");
		return result.toString();
	}

	/**
	 *  property: 
	 */
	protected String property;

	private One2ManyFrom source;

	/**
	 * Implements the getter of association end 
	 * 
	 * @param element 
	 */
	public One2ManyFrom getSource() {
		return this.source;
	}

	/**
	 * Implements the setter of association end 
	 * 
	 * @param element 
	 */
	public void setSource(One2ManyFrom element) {
		if (this.source != element) {
			if (this.source != null) {
				this.source
						.z_internalRemoveFromtargetBiDirectional((One2ManyOrderedTo) ((One2ManyOrderedTo) this));
			}
			this.source = element;
			if (element != null) {
				element
						.z_internalAddTotargetBiDirectional((One2ManyOrderedTo) ((One2ManyOrderedTo) this));
			}
		}
		validation.validate();
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link
	 * for + owner when a single element is added to it.
	 * 
	 * @param element 
	 */
	public void z_internalAddTosource(One2ManyFrom element) {
		this.source = element;
	}

	/**
	 * Should NOT be used by clients! Implements the correct setting of the link for + owner  
	 *                  when a single element is removed to it.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromsource(One2ManyFrom element) {
		this.source = null;
	}

	private void addValidators() {

		validation.addValidator(new NotNullValidator(One2ManyOrderedTo.class,
				"property"));

	}

	/**
	 * Default no-argument constructor for One2ManyOrderedToImplBase 
	 */
	protected One2ManyOrderedToImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for One2ManyOrderedToImplBase
	 *
	 * @param property (String) 
	 */
	public One2ManyOrderedToImplBase(String property) {

		this.property = property;
		addValidators();
		validation.validate();
	}

	/**
	 * @return property (String) 
	 */
	public String getProperty() {
		return this.property;
	}

	/**
	 * @param property (String) 
	 */
	public void setProperty(final String property) {
		this.property = property;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
