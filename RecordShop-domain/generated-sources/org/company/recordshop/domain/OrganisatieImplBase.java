
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN! 
 *
 * Generated by Mod4j. 
 *     Time             : Fri Jun 10 13:47:10 CEST 2011
 *     Application model: Organisatie
 *     Generator        : Mod4j BusinessDomainDsl generator: NewJavaBean.xpt
 */

package org.company.recordshop.domain;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;
import org.mod4j.runtime.validation.NotNullValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */
@SuppressWarnings("serial")
public abstract class OrganisatieImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * version: The version of this object 
	 */
	private int version = -1;

	/**
	 * @return version (Integer) The version of this object.
	 */
	public Integer getVersion() {
		return this.version;
	}

	/**
	 * toString method for OrganisatieImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("org.company.recordshop.domain.Organisatie[");
		result.append("id=");
		result.append(getId());
		result.append(",");
		result.append("version=");
		result.append(getVersion());

		result.append(",");
		result.append("naam=");
		result.append(naam);

		result.append("]");
		return result.toString();
	}

	/**
	 *  naam: 
	 */
	protected String naam;

	private Set<Kader> kaders = new HashSet<Kader>();

	/**
	 * @return kaders (Set<Kader>).
	 */
	public Set<Kader> getKaders() {
		return Collections.unmodifiableSet(this.kaders);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return kaders (Set<Kader>)
	 * @return kaders (Set<Kader>)
	 *         with the given id.
	 */
	public Kader getFromKaders(Long id) {
		if (id == null) {
			return null;
		}
		for (Kader kader : this.kaders) {
			if (id.equals(kader.getId())) {
				return kader;
			}
		}
		return null;
	}

	/**
	 * Implements adding single element to a collection.
	 */
	public void addToKaders(Kader element) {
		if (element == null) {
			return;
		}
		if (!kaders.contains(element)) {
			kaders.add(element);
			element.addToOrganisaties((Organisatie) this);
			validation.validate();
		}
	}

	/**
	 * Implements removing a single element from a collection.
	 */
	public boolean removeFromKaders(Kader element) {
		if (element == null) {
			return false;
		}
		if (kaders.contains(element)) {
			this.kaders.remove(element);
			element.removeFromOrganisaties((Organisatie) this);
			validation.validate();
			return true;
		}
		return false;
	}

	private Set<CasusOverleg> overleggen = new HashSet<CasusOverleg>();

	/**
	 * @return overleggen (Set<CasusOverleg>).
	 */
	public Set<CasusOverleg> getOverleggen() {
		return Collections.unmodifiableSet(this.overleggen);
	}

	/**
	 * @param id
	 *        id of the collection element to return
	 *
	 * @return overleggen (Set<CasusOverleg>)
	 * @return overleggen (Set<CasusOverleg>)
	 *         with the given id.
	 */
	public CasusOverleg getFromOverleggen(Long id) {
		if (id == null) {
			return null;
		}
		for (CasusOverleg casusOverleg : this.overleggen) {
			if (id.equals(casusOverleg.getId())) {
				return casusOverleg;
			}
		}
		return null;
	}

	/**
	 * Implements adding single element to a collection.
	 */
	public void addToOverleggen(CasusOverleg element) {
		if (element == null) {
			return;
		}
		if (!overleggen.contains(element)) {
			overleggen.add(element);
			element.addToOrganisaties((Organisatie) this);
			validation.validate();
		}
	}

	/**
	 * Implements removing a single element from a collection.
	 */
	public boolean removeFromOverleggen(CasusOverleg element) {
		if (element == null) {
			return false;
		}
		if (overleggen.contains(element)) {
			this.overleggen.remove(element);
			element.removeFromOrganisaties((Organisatie) this);
			validation.validate();
			return true;
		}
		return false;
	}

	private void addValidators() {

		validation
				.addValidator(new NotNullValidator(Organisatie.class, "naam"));

	}

	/**
	 * Default no-argument constructor for OrganisatieImplBase 
	 */
	protected OrganisatieImplBase() {

		addValidators();
	}

	/**
	 * Minimal constructor for OrganisatieImplBase
	 *
	 * @param naam (String) 
	 */
	public OrganisatieImplBase(String naam) {

		this.naam = naam;
		addValidators();
		validation.validate();
	}

	/**
	 * @return naam (String) 
	 */
	public String getNaam() {
		return this.naam;
	}

	/**
	 * @param naam (String) 
	 */
	public void setNaam(final String naam) {
		this.naam = naam;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
